#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GongduolaConfig

#include "Basic.hpp"

#include "BP_VehicleConfig_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GongduolaConfig.BP_GongduolaConfig_C
// 0x00E0 (0x01B8 - 0x00D8)
class UBP_GongduolaConfig_C final : public UBP_VehicleConfig_C
{
public:
	float                                         前进最大移动速度;                                  // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态后退最大移动速度;                              // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态前进加速度;                                    // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态后退加速度;                                    // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态刹车加速度;                                    // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态最小加速度;                                    // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态最大转向加速度;                                // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态最小转向加速度;                                // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态转向公式角度修正系数;                          // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态转向公式速度修正系数;                          // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态转向公式最终修正系数;                          // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态径向运动摩擦力;                                // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态横向运动摩擦力;                                // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态最大转向速度;                                  // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态转向摩擦力系数;                                // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态转向静止摩擦力;                                // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺超限持续时间;                                  // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺超限移动速度;                                  // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺最大移动速度;                                  // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺后退最大移动速度;                              // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺停止速度;                                      // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺前进加速度;                                    // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺刹车加速度;                                    // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺后退加速度;                                    // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺最小加速度;                                    // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺最大转向加速度;                                // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺最小转向加速度;                                // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺转向公式角度修正系数;                          // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺转向公式速度修正系数;                          // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺转向公式最终修正系数;                          // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺径向运动摩擦力;                                // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺横向运动摩擦力;                                // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺最大转向速度;                                  // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺转向摩擦力系数;                                // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺转向静止摩擦力;                                // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         超出最大速度时的额外摩擦力;                        // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺固定前向输入时间;                              // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         最大上浮速度;                                      // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         浮力平衡位置;                                      // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         搁浅位置;                                          // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         漂浮阻力系数;                                      // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         转动惯量;                                          // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         速度冲击力系数;                                    // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         旋转冲击力系数;                                    // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态转向强制前向输入系数;                          // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺转向强制前向输入系数;                          // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态最大前后输入阈值;                              // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         常态最大左右输入阈值;                              // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺最大前后输入阈值;                              // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺最大左右输入阈值;                              // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺持续时间;                                      // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         冲刺冷却时间;                                      // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         冲刺最大使用次数;                                  // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         前向转弯最小X输入;                                 // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         后向转向最大X输入;                                 // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GongduolaConfig_C">();
	}
	static class UBP_GongduolaConfig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GongduolaConfig_C>();
	}
};
static_assert(alignof(UBP_GongduolaConfig_C) == 0x000008, "Wrong alignment on UBP_GongduolaConfig_C");
static_assert(sizeof(UBP_GongduolaConfig_C) == 0x0001B8, "Wrong size on UBP_GongduolaConfig_C");
static_assert(offsetof(UBP_GongduolaConfig_C, 前进最大移动速度) == 0x0000D8, "Member 'UBP_GongduolaConfig_C::前进最大移动速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态后退最大移动速度) == 0x0000DC, "Member 'UBP_GongduolaConfig_C::常态后退最大移动速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态前进加速度) == 0x0000E0, "Member 'UBP_GongduolaConfig_C::常态前进加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态后退加速度) == 0x0000E4, "Member 'UBP_GongduolaConfig_C::常态后退加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态刹车加速度) == 0x0000E8, "Member 'UBP_GongduolaConfig_C::常态刹车加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态最小加速度) == 0x0000EC, "Member 'UBP_GongduolaConfig_C::常态最小加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态最大转向加速度) == 0x0000F0, "Member 'UBP_GongduolaConfig_C::常态最大转向加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态最小转向加速度) == 0x0000F4, "Member 'UBP_GongduolaConfig_C::常态最小转向加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态转向公式角度修正系数) == 0x0000F8, "Member 'UBP_GongduolaConfig_C::常态转向公式角度修正系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态转向公式速度修正系数) == 0x0000FC, "Member 'UBP_GongduolaConfig_C::常态转向公式速度修正系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态转向公式最终修正系数) == 0x000100, "Member 'UBP_GongduolaConfig_C::常态转向公式最终修正系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态径向运动摩擦力) == 0x000104, "Member 'UBP_GongduolaConfig_C::常态径向运动摩擦力' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态横向运动摩擦力) == 0x000108, "Member 'UBP_GongduolaConfig_C::常态横向运动摩擦力' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态最大转向速度) == 0x00010C, "Member 'UBP_GongduolaConfig_C::常态最大转向速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态转向摩擦力系数) == 0x000110, "Member 'UBP_GongduolaConfig_C::常态转向摩擦力系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态转向静止摩擦力) == 0x000114, "Member 'UBP_GongduolaConfig_C::常态转向静止摩擦力' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺超限持续时间) == 0x000118, "Member 'UBP_GongduolaConfig_C::冲刺超限持续时间' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺超限移动速度) == 0x00011C, "Member 'UBP_GongduolaConfig_C::冲刺超限移动速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺最大移动速度) == 0x000120, "Member 'UBP_GongduolaConfig_C::冲刺最大移动速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺后退最大移动速度) == 0x000124, "Member 'UBP_GongduolaConfig_C::冲刺后退最大移动速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺停止速度) == 0x000128, "Member 'UBP_GongduolaConfig_C::冲刺停止速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺前进加速度) == 0x00012C, "Member 'UBP_GongduolaConfig_C::冲刺前进加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺刹车加速度) == 0x000130, "Member 'UBP_GongduolaConfig_C::冲刺刹车加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺后退加速度) == 0x000134, "Member 'UBP_GongduolaConfig_C::冲刺后退加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺最小加速度) == 0x000138, "Member 'UBP_GongduolaConfig_C::冲刺最小加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺最大转向加速度) == 0x00013C, "Member 'UBP_GongduolaConfig_C::冲刺最大转向加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺最小转向加速度) == 0x000140, "Member 'UBP_GongduolaConfig_C::冲刺最小转向加速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺转向公式角度修正系数) == 0x000144, "Member 'UBP_GongduolaConfig_C::冲刺转向公式角度修正系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺转向公式速度修正系数) == 0x000148, "Member 'UBP_GongduolaConfig_C::冲刺转向公式速度修正系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺转向公式最终修正系数) == 0x00014C, "Member 'UBP_GongduolaConfig_C::冲刺转向公式最终修正系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺径向运动摩擦力) == 0x000150, "Member 'UBP_GongduolaConfig_C::冲刺径向运动摩擦力' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺横向运动摩擦力) == 0x000154, "Member 'UBP_GongduolaConfig_C::冲刺横向运动摩擦力' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺最大转向速度) == 0x000158, "Member 'UBP_GongduolaConfig_C::冲刺最大转向速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺转向摩擦力系数) == 0x00015C, "Member 'UBP_GongduolaConfig_C::冲刺转向摩擦力系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺转向静止摩擦力) == 0x000160, "Member 'UBP_GongduolaConfig_C::冲刺转向静止摩擦力' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 超出最大速度时的额外摩擦力) == 0x000164, "Member 'UBP_GongduolaConfig_C::超出最大速度时的额外摩擦力' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺固定前向输入时间) == 0x000168, "Member 'UBP_GongduolaConfig_C::冲刺固定前向输入时间' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 最大上浮速度) == 0x00016C, "Member 'UBP_GongduolaConfig_C::最大上浮速度' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 浮力平衡位置) == 0x000170, "Member 'UBP_GongduolaConfig_C::浮力平衡位置' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 搁浅位置) == 0x000174, "Member 'UBP_GongduolaConfig_C::搁浅位置' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 漂浮阻力系数) == 0x000178, "Member 'UBP_GongduolaConfig_C::漂浮阻力系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 转动惯量) == 0x00017C, "Member 'UBP_GongduolaConfig_C::转动惯量' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 速度冲击力系数) == 0x000180, "Member 'UBP_GongduolaConfig_C::速度冲击力系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 旋转冲击力系数) == 0x000184, "Member 'UBP_GongduolaConfig_C::旋转冲击力系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态转向强制前向输入系数) == 0x000188, "Member 'UBP_GongduolaConfig_C::常态转向强制前向输入系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺转向强制前向输入系数) == 0x00018C, "Member 'UBP_GongduolaConfig_C::冲刺转向强制前向输入系数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态最大前后输入阈值) == 0x000190, "Member 'UBP_GongduolaConfig_C::常态最大前后输入阈值' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 常态最大左右输入阈值) == 0x000194, "Member 'UBP_GongduolaConfig_C::常态最大左右输入阈值' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺最大前后输入阈值) == 0x000198, "Member 'UBP_GongduolaConfig_C::冲刺最大前后输入阈值' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺最大左右输入阈值) == 0x00019C, "Member 'UBP_GongduolaConfig_C::冲刺最大左右输入阈值' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺持续时间) == 0x0001A0, "Member 'UBP_GongduolaConfig_C::冲刺持续时间' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺冷却时间) == 0x0001A4, "Member 'UBP_GongduolaConfig_C::冲刺冷却时间' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 冲刺最大使用次数) == 0x0001A8, "Member 'UBP_GongduolaConfig_C::冲刺最大使用次数' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 前向转弯最小X输入) == 0x0001AC, "Member 'UBP_GongduolaConfig_C::前向转弯最小X输入' has a wrong offset!");
static_assert(offsetof(UBP_GongduolaConfig_C, 后向转向最大X输入) == 0x0001B0, "Member 'UBP_GongduolaConfig_C::后向转向最大X输入' has a wrong offset!");

}

