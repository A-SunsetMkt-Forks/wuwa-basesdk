#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Input_DarkNanzhu

#include "Basic.hpp"

#include "sInputCommand_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_Input_DarkNanzhu.BP_Input_DarkNanzhu_C.攻击按下
// 0x0388 (0x0388 - 0x0000)
struct BP_Input_DarkNanzhu_C_攻击按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable;                                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x001C(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0038(0x0020)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x0060(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x007C(0x000C)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0088(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Array_Index_Variable_1;                     // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x00A0(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x00B4(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable_1;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x00CC(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_1;                                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x00E4(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_1;                    // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_2;                                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x0100(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x011C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x011D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x0120(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable_2;                    // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_1;        // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_2;        // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13E[0x2];                                      // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_7;         // 0x0140(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0157(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ___bool_True_if_break_was_hit_Variable_2;          // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_172[0x2];                                      // 0x0172(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_8;         // 0x0174(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x0190(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_9;         // 0x01A4(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x01B8(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_1; // 0x01D8(0x0010)(ReferenceParm)
	struct FGameplayTag                           CallFunc_Array_Get_Item_1;                         // 0x01E8(0x000C)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_10;        // 0x01F4(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x020C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x020D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20E[0x2];                                      // 0x020E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2;  // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_3;  // 0x0228(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_3;     // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_3;        // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23A[0x6];                                      // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_4;  // 0x0240(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_4;     // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_5;  // 0x0258(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_5;     // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0270(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_6;  // 0x0288(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_6;     // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29A[0x2];                                      // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_3;                                 // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue_4;        // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable_2;                     // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x02A8(0x0020)()
	int32                                         ___int_Variable_4;                                 // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags_2; // 0x02D0(0x0010)(ReferenceParm)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_11;        // 0x02E0(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item_3;                         // 0x02F4(0x000C)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0308(0x0010)(ReferenceParm)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Variable_5;                                 // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_4;                         // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0324(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array_2;                          // 0x0328(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Get_Item_5;                         // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33C[0x4];                                      // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_7;  // 0x0340(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_7;     // 0x0350(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_2;         // 0x0351(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_352[0x6];                                      // 0x0352(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_8;  // 0x0358(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_8;     // 0x0368(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_9;  // 0x0370(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_9;     // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_DarkNanzhu_C_攻击按下) == 0x000008, "Wrong alignment on BP_Input_DarkNanzhu_C_攻击按下");
static_assert(sizeof(BP_Input_DarkNanzhu_C_攻击按下) == 0x000388, "Wrong size on BP_Input_DarkNanzhu_C_攻击按下");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, time) == 0x000000, "Member 'BP_Input_DarkNanzhu_C_攻击按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ReturnValue) == 0x000004, "Member 'BP_Input_DarkNanzhu_C_攻击按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Variable) == 0x000018, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc______ReturnValue) == 0x00001C, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Loop_Counter_Variable) == 0x000030, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000038, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x000060, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___bool_True_if_break_was_hit_Variable) == 0x000074, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Not_PreBool_ReturnValue) == 0x000075, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CanResponseInput_ReturnValue) == 0x000076, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Array_Index_Variable) == 0x000078, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_Get_Item) == 0x00007C, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000088, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Array_Index_Variable_1) == 0x00009C, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x0000A0, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x0000B4, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___bool_True_if_break_was_hit_Variable_1) == 0x0000C8, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_1) == 0x0000C9, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x0000CC, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Variable_1) == 0x0000E0, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x0000E4, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Loop_Counter_Variable_1) == 0x0000F8, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Variable_2) == 0x0000FC, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x000100, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Less_IntInt_ReturnValue) == 0x000114, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_1) == 0x000118, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_BooleanAND_ReturnValue) == 0x00011C, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x00011D, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x000120, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Loop_Counter_Variable_2) == 0x000134, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Add_IntInt_ReturnValue_2) == 0x000138, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue_1) == 0x00013C, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue_2) == 0x00013D, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_7) == 0x000140, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000154, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000155, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x000156, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_BooleanAND_ReturnValue_1) == 0x000157, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_BooleanOR_ReturnValue) == 0x000158, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000160, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000170, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___bool_True_if_break_was_hit_Variable_2) == 0x000171, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_8) == 0x000174, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Not_PreBool_ReturnValue_2) == 0x000188, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000190, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x0001A0, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_9) == 0x0001A4, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x0001B8, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_1) == 0x0001D8, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_Get_Item_1) == 0x0001E8, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_10) == 0x0001F4, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_Length_ReturnValue_1) == 0x000208, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_1) == 0x00020C, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_BooleanAND_ReturnValue_2) == 0x00020D, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x000210, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x000220, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_3) == 0x000228, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_3) == 0x000238, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue_3) == 0x000239, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_4) == 0x000240, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_4) == 0x000250, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_5) == 0x000258, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_5' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_5) == 0x000268, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, K2Node_MakeArray_Array) == 0x000270, "Member 'BP_Input_DarkNanzhu_C_攻击按下::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_Get_Item_2) == 0x000280, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_6) == 0x000288, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_6' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_6) == 0x000298, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000299, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Variable_3) == 0x00029C, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue_4) == 0x0002A0, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Array_Index_Variable_2) == 0x0002A4, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x0002A8, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Variable_4) == 0x0002C8, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags_2) == 0x0002D0, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_11) == 0x0002E0, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_Get_Item_3) == 0x0002F4, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_Length_ReturnValue_2) == 0x000300, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_2) == 0x000304, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, K2Node_MakeArray_Array_1) == 0x000308, "Member 'BP_Input_DarkNanzhu_C_攻击按下::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_BooleanAND_ReturnValue_3) == 0x000318, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, ___int_Variable_5) == 0x00031C, "Member 'BP_Input_DarkNanzhu_C_攻击按下::___int_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_Get_Item_4) == 0x000320, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000324, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, K2Node_MakeArray_Array_2) == 0x000328, "Member 'BP_Input_DarkNanzhu_C_攻击按下::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_Get_Item_5) == 0x000338, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_7) == 0x000340, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_7' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_7) == 0x000350, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue_2) == 0x000351, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_8) == 0x000358, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_8' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_8) == 0x000368, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_9) == 0x000370, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_9' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_9) == 0x000380, "Member 'BP_Input_DarkNanzhu_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_9' has a wrong offset!");

// Function BP_Input_DarkNanzhu.BP_Input_DarkNanzhu_C.攻击长按
// 0x0098 (0x0098 - 0x0000)
struct BP_Input_DarkNanzhu_C_攻击长按 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0054(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0068(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_DarkNanzhu_C_攻击长按) == 0x000008, "Wrong alignment on BP_Input_DarkNanzhu_C_攻击长按");
static_assert(sizeof(BP_Input_DarkNanzhu_C_攻击长按) == 0x000098, "Wrong size on BP_Input_DarkNanzhu_C_攻击长按");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, time) == 0x000000, "Member 'BP_Input_DarkNanzhu_C_攻击长按::time' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, ReturnValue) == 0x000004, "Member 'BP_Input_DarkNanzhu_C_攻击长按::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue) == 0x00002C, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_CanResponseInput_ReturnValue) == 0x000040, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x000044, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x000048, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00004D, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_IsMovingOnGround_ReturnValue) == 0x00004E, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00004F, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_BooleanAND_ReturnValue) == 0x000050, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_BooleanOR_ReturnValue) == 0x000051, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000054, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000068, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000080, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000090, "Member 'BP_Input_DarkNanzhu_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function BP_Input_DarkNanzhu.BP_Input_DarkNanzhu_C.技能1按下
// 0x0070 (0x0070 - 0x0000)
struct BP_Input_DarkNanzhu_C_技能1按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0030(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x0044(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_DarkNanzhu_C_技能1按下) == 0x000008, "Wrong alignment on BP_Input_DarkNanzhu_C_技能1按下");
static_assert(sizeof(BP_Input_DarkNanzhu_C_技能1按下) == 0x000070, "Wrong size on BP_Input_DarkNanzhu_C_技能1按下");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, time) == 0x000000, "Member 'BP_Input_DarkNanzhu_C_技能1按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, ReturnValue) == 0x000004, "Member 'BP_Input_DarkNanzhu_C_技能1按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000018, "Member 'BP_Input_DarkNanzhu_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, CallFunc_CanResponseInput_ReturnValue) == 0x00002C, "Member 'BP_Input_DarkNanzhu_C_技能1按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000030, "Member 'BP_Input_DarkNanzhu_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, CallFunc___1___ReturnValue) == 0x000044, "Member 'BP_Input_DarkNanzhu_C_技能1按下::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000058, "Member 'BP_Input_DarkNanzhu_C_技能1按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000068, "Member 'BP_Input_DarkNanzhu_C_技能1按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000069, "Member 'BP_Input_DarkNanzhu_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x00006A, "Member 'BP_Input_DarkNanzhu_C_技能1按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00006B, "Member 'BP_Input_DarkNanzhu_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, CallFunc_BooleanAND_ReturnValue) == 0x00006C, "Member 'BP_Input_DarkNanzhu_C_技能1按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_技能1按下, CallFunc_BooleanOR_ReturnValue) == 0x00006D, "Member 'BP_Input_DarkNanzhu_C_技能1按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Input_DarkNanzhu.BP_Input_DarkNanzhu_C.大招按下
// 0x0040 (0x0040 - 0x0000)
struct BP_Input_DarkNanzhu_C_大招按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0020(0x0014)(NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_DarkNanzhu_C_大招按下) == 0x000004, "Wrong alignment on BP_Input_DarkNanzhu_C_大招按下");
static_assert(sizeof(BP_Input_DarkNanzhu_C_大招按下) == 0x000040, "Wrong size on BP_Input_DarkNanzhu_C_大招按下");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, time) == 0x000000, "Member 'BP_Input_DarkNanzhu_C_大招按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, ReturnValue) == 0x000004, "Member 'BP_Input_DarkNanzhu_C_大招按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, CallFunc_CanResponseInput_ReturnValue) == 0x000018, "Member 'BP_Input_DarkNanzhu_C_大招按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'BP_Input_DarkNanzhu_C_大招按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x00001A, "Member 'BP_Input_DarkNanzhu_C_大招按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00001B, "Member 'BP_Input_DarkNanzhu_C_大招按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, CallFunc_BooleanAND_ReturnValue) == 0x00001C, "Member 'BP_Input_DarkNanzhu_C_大招按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, CallFunc_BooleanOR_ReturnValue) == 0x00001D, "Member 'BP_Input_DarkNanzhu_C_大招按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000020, "Member 'BP_Input_DarkNanzhu_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x000034, "Member 'BP_Input_DarkNanzhu_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x000038, "Member 'BP_Input_DarkNanzhu_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_DarkNanzhu_C_大招按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00003C, "Member 'BP_Input_DarkNanzhu_C_大招按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

