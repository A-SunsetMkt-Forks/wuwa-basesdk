#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroVehicle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "KuroVehicle_structs.hpp"
#include "KuroAnim_classes.hpp"
#include "KuroGAS_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class KuroVehicle.KuroAnimInstanceVehicle
// 0x0070 (0x0660 - 0x05F0)
class UKuroAnimInstanceVehicle final : public UKuroAnimInstance
{
public:
	uint8                                         Pad_5F0[0x8];                                      // 0x05F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbpLogicParams*                        LogicParams;                                       // 0x05F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AKuroBaseVehicle*                       BaseVehicle;                                       // 0x0600(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0608(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntityId;                                          // 0x060C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAutonomousProxy;                                // 0x0610(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_611[0x3];                                      // 0x0611(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Velocity;                                          // 0x0614(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_620[0xC];                                      // 0x0620(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsMovedLocation;                                  // 0x062C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62D[0xF];                                      // 0x062D(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Acceleration;                                      // 0x063C(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorForward;                                      // 0x0648(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_654[0xC];                                      // 0x0654(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroAnimInstanceVehicle">();
	}
	static class UKuroAnimInstanceVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroAnimInstanceVehicle>();
	}
};
static_assert(alignof(UKuroAnimInstanceVehicle) == 0x000010, "Wrong alignment on UKuroAnimInstanceVehicle");
static_assert(sizeof(UKuroAnimInstanceVehicle) == 0x000660, "Wrong size on UKuroAnimInstanceVehicle");
static_assert(offsetof(UKuroAnimInstanceVehicle, LogicParams) == 0x0005F8, "Member 'UKuroAnimInstanceVehicle::LogicParams' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, BaseVehicle) == 0x000600, "Member 'UKuroAnimInstanceVehicle::BaseVehicle' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, DeltaTime) == 0x000608, "Member 'UKuroAnimInstanceVehicle::DeltaTime' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, EntityId) == 0x00060C, "Member 'UKuroAnimInstanceVehicle::EntityId' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, bIsAutonomousProxy) == 0x000610, "Member 'UKuroAnimInstanceVehicle::bIsAutonomousProxy' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, Velocity) == 0x000614, "Member 'UKuroAnimInstanceVehicle::Velocity' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, bIsMovedLocation) == 0x00062C, "Member 'UKuroAnimInstanceVehicle::bIsMovedLocation' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, Acceleration) == 0x00063C, "Member 'UKuroAnimInstanceVehicle::Acceleration' has a wrong offset!");
static_assert(offsetof(UKuroAnimInstanceVehicle, ActorForward) == 0x000648, "Member 'UKuroAnimInstanceVehicle::ActorForward' has a wrong offset!");

// Class KuroVehicle.KuroBaseVehicle
// 0x0020 (0x0680 - 0x0660)
class AKuroBaseVehicle : public ABaseCharacter
{
public:
	class UKuroVehicleMovementComponent*          VehicleMovementComponent;                          // 0x0658(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             VehicleMovementModeChangedDelegate;                // 0x0660(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVehicleMovementUpdated;                          // 0x0670(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void K2_OnVehicleMovementModeChanged(EKuroVehicleMovementMode PrevMovementMode, EKuroVehicleMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void K2_UpdateVehicleCustomMovement(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroBaseVehicle">();
	}
	static class AKuroBaseVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AKuroBaseVehicle>();
	}
};
static_assert(alignof(AKuroBaseVehicle) == 0x000010, "Wrong alignment on AKuroBaseVehicle");
static_assert(sizeof(AKuroBaseVehicle) == 0x000680, "Wrong size on AKuroBaseVehicle");
static_assert(offsetof(AKuroBaseVehicle, VehicleMovementComponent) == 0x000658, "Member 'AKuroBaseVehicle::VehicleMovementComponent' has a wrong offset!");
static_assert(offsetof(AKuroBaseVehicle, VehicleMovementModeChangedDelegate) == 0x000660, "Member 'AKuroBaseVehicle::VehicleMovementModeChangedDelegate' has a wrong offset!");
static_assert(offsetof(AKuroBaseVehicle, OnVehicleMovementUpdated) == 0x000670, "Member 'AKuroBaseVehicle::OnVehicleMovementUpdated' has a wrong offset!");

// Class KuroVehicle.KuroVehicleMovementComponent
// 0x0120 (0x0270 - 0x0150)
class UKuroVehicleMovementComponent final : public UPawnMovementComponent
{
public:
	class AKuroBaseVehicle*                       VehicleOwner;                                      // 0x0150(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UShapeComponent*>                VehicleShapes;                                     // 0x0158(0x0010)(ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	EKuroVehicleMovementMode                      MovementMode;                                      // 0x0168(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CustomMovementMode;                                // 0x0169(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRunPhysicsWithNoController : 1;                   // 0x016A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_16B[0x1];                                      // 0x016B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityScale;                                      // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationVelocity;                                  // 0x0178(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RotationAcceleration;                              // 0x0184(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         MaxBackwardSpeed;                                  // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFriction;                                       // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFriction;                                       // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExtraFrictionWhenExceedMaxSpeed;                   // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRotationSpeed;                                  // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotAccAngleCoef;                                   // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotAccSpeedCoef;                                   // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotAccConstCoef;                                   // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotFrictionFactor;                                 // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticRotFriction;                                 // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotaryInertia;                                     // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedImpactFactor;                                 // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationImpactFactor;                              // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOrientRotationToMovement : 1;                     // 0x01C4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseControllerDesiredRotation : 1;                 // 0x01C4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotationRate;                                      // 0x01C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Acceleration;                                      // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FQuat                                  LastUpdateRotation;                                // 0x01E0(0x0010)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                LastUpdateLocation;                                // 0x01F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastUpdateVelocity;                                // 0x01FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               LastUpdateRotationVelocity;                        // 0x0208(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                PendingImpulseToApply;                             // 0x0214(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PendingForceToApply;                               // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnalogInputModifier;                               // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_230[0x4];                                      // 0x0230(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSimulationTimeStep;                             // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSimulationIterations;                           // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSimulationRotationIterations;                   // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_240[0x10];                                     // 0x0240(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bDeferUpdateMoveComponent : 1;                     // 0x0250(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        DeferredUpdatedMoveComponent;                      // 0x0258(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bMovementInProgress : 1;                           // 0x0260(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_261[0xF];                                      // 0x0261(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandlePassiveVehicleImpact(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void InitVehicleShapes();
	void Kuro_SetGravityDirect(const struct FVector& InGravityDirect);
	void SetMovementMode(EKuroVehicleMovementMode NewMovementMode, uint8 NewCustomMode);

	float GetMaxAcceleration() const;
	struct FVector Kuro_GetGravity() const;
	struct FVector Kuro_GetGravityDirect() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KuroVehicleMovementComponent">();
	}
	static class UKuroVehicleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKuroVehicleMovementComponent>();
	}
};
static_assert(alignof(UKuroVehicleMovementComponent) == 0x000010, "Wrong alignment on UKuroVehicleMovementComponent");
static_assert(sizeof(UKuroVehicleMovementComponent) == 0x000270, "Wrong size on UKuroVehicleMovementComponent");
static_assert(offsetof(UKuroVehicleMovementComponent, VehicleOwner) == 0x000150, "Member 'UKuroVehicleMovementComponent::VehicleOwner' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, VehicleShapes) == 0x000158, "Member 'UKuroVehicleMovementComponent::VehicleShapes' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MovementMode) == 0x000168, "Member 'UKuroVehicleMovementComponent::MovementMode' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, CustomMovementMode) == 0x000169, "Member 'UKuroVehicleMovementComponent::CustomMovementMode' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, GravityScale) == 0x00016C, "Member 'UKuroVehicleMovementComponent::GravityScale' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxAcceleration) == 0x000170, "Member 'UKuroVehicleMovementComponent::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxSpeed) == 0x000174, "Member 'UKuroVehicleMovementComponent::MaxSpeed' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotationVelocity) == 0x000178, "Member 'UKuroVehicleMovementComponent::RotationVelocity' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotationAcceleration) == 0x000184, "Member 'UKuroVehicleMovementComponent::RotationAcceleration' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxBackwardSpeed) == 0x000190, "Member 'UKuroVehicleMovementComponent::MaxBackwardSpeed' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MinFriction) == 0x000194, "Member 'UKuroVehicleMovementComponent::MinFriction' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxFriction) == 0x000198, "Member 'UKuroVehicleMovementComponent::MaxFriction' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, ExtraFrictionWhenExceedMaxSpeed) == 0x00019C, "Member 'UKuroVehicleMovementComponent::ExtraFrictionWhenExceedMaxSpeed' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxRotationSpeed) == 0x0001A0, "Member 'UKuroVehicleMovementComponent::MaxRotationSpeed' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotAccAngleCoef) == 0x0001A4, "Member 'UKuroVehicleMovementComponent::RotAccAngleCoef' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotAccSpeedCoef) == 0x0001A8, "Member 'UKuroVehicleMovementComponent::RotAccSpeedCoef' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotAccConstCoef) == 0x0001AC, "Member 'UKuroVehicleMovementComponent::RotAccConstCoef' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotFrictionFactor) == 0x0001B0, "Member 'UKuroVehicleMovementComponent::RotFrictionFactor' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, StaticRotFriction) == 0x0001B4, "Member 'UKuroVehicleMovementComponent::StaticRotFriction' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotaryInertia) == 0x0001B8, "Member 'UKuroVehicleMovementComponent::RotaryInertia' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, SpeedImpactFactor) == 0x0001BC, "Member 'UKuroVehicleMovementComponent::SpeedImpactFactor' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotationImpactFactor) == 0x0001C0, "Member 'UKuroVehicleMovementComponent::RotationImpactFactor' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, RotationRate) == 0x0001C8, "Member 'UKuroVehicleMovementComponent::RotationRate' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, Acceleration) == 0x0001D4, "Member 'UKuroVehicleMovementComponent::Acceleration' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, LastUpdateRotation) == 0x0001E0, "Member 'UKuroVehicleMovementComponent::LastUpdateRotation' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, LastUpdateLocation) == 0x0001F0, "Member 'UKuroVehicleMovementComponent::LastUpdateLocation' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, LastUpdateVelocity) == 0x0001FC, "Member 'UKuroVehicleMovementComponent::LastUpdateVelocity' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, LastUpdateRotationVelocity) == 0x000208, "Member 'UKuroVehicleMovementComponent::LastUpdateRotationVelocity' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, PendingImpulseToApply) == 0x000214, "Member 'UKuroVehicleMovementComponent::PendingImpulseToApply' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, PendingForceToApply) == 0x000220, "Member 'UKuroVehicleMovementComponent::PendingForceToApply' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, AnalogInputModifier) == 0x00022C, "Member 'UKuroVehicleMovementComponent::AnalogInputModifier' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxSimulationTimeStep) == 0x000234, "Member 'UKuroVehicleMovementComponent::MaxSimulationTimeStep' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxSimulationIterations) == 0x000238, "Member 'UKuroVehicleMovementComponent::MaxSimulationIterations' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, MaxSimulationRotationIterations) == 0x00023C, "Member 'UKuroVehicleMovementComponent::MaxSimulationRotationIterations' has a wrong offset!");
static_assert(offsetof(UKuroVehicleMovementComponent, DeferredUpdatedMoveComponent) == 0x000258, "Member 'UKuroVehicleMovementComponent::DeferredUpdatedMoveComponent' has a wrong offset!");

}

