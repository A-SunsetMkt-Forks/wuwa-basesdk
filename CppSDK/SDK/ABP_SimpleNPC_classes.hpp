#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_SimpleNPC

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "KuroAnim_structs.hpp"
#include "KuroAnim_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_SimpleNPC.ABP_SimpleNPC_C
// 0x11C0 (0x17B0 - 0x05F0)
class UABP_SimpleNPC_C : public UKuroAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x05F8(0x0038)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x0630(0x0060)()
	struct FAnimNode_Inertialization              AnimGraphNode_Inertialization;                     // 0x0690(0x0070)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0700(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0728(0x0028)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x0750(0x00F8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0848(0x0038)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0880(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x08A8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x08D0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0960(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0998(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x0A28(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_3;                      // 0x0A60(0x0148)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x0BA8(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x0BE0(0x0148)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0D28(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x0D60(0x0148)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0EA8(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0EE0(0x0148)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x1028(0x0060)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x1088(0x00D8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x1160(0x0060)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x11C0(0x00D8)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1298(0x0038)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer;                     // 0x12D0(0x00C0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x1390(0x0060)()
	struct FAnimNode_SightLock                    AnimGraphNode_SightLock;                           // 0x13F0(0x01C0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x15B0(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x15D0(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x15F0(0x0090)()
	struct FAnimNode_TextureFace                  AnimGraphNode_TextureFace;                         // 0x1680(0x00C8)(ContainsInstancedReference)
	class ABP_BaseNPC_C*                          _r__;                                              // 0x1748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IfPlayIdleAction;                                  // 0x1750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1751[0x7];                                     // 0x1751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   IdleMontageArray;                                  // 0x1758(0x0010)(Edit, BlueprintVisible)
	class USkeletalMeshComponent*                 _rMesh;                                            // 0x1768(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SightDirect;                                       // 0x1770(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBeingImpacted;                                   // 0x177C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ESightLockMode                                SightLockMode;                                     // 0x177D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_177E[0x2];                                     // 0x177E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NpcEntityId;                                       // 0x1780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionDirection;                                // 0x1784(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionStrength;                                 // 0x1788(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBeingAttacked;                                   // 0x178C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_178D[0x3];                                     // 0x178D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExpresionAlpha;                                    // 0x1790(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomEpresionEndTime;                             // 0x1794(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ______;                                            // 0x1798(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dn_______;                                         // 0x179C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __Minus;                                           // 0x17A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ABP_SimpleNPC(int32 EntryPoint);
	void AnimNotify_OnCollisionAnimEnd();
	void AnimNotify_OnCollisionAnimBegin();
	void ClimbDash();
	void OnComponentStart();
	void AnimNotify_PlayMontage();
	void InterfaceSimulateJump(float Speed);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintInitializeAnimation();
	void InterfaceFixHookDirect(const struct FVector& Offset);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SimpleNPC_AnimGraphNode_TransitionResult_A3DDDAF84E59A352959207BE6856CD09();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_SimpleNPC_AnimGraphNode_TextureFace_6304FB5245A848CBC89E3BB3A0C53C84();
	void OnNotifyEnd_D6858A004FA1AB8DDEB894A2775AA567(class FName NotifyName);
	void OnNotifyBegin_D6858A004FA1AB8DDEB894A2775AA567(class FName NotifyName);
	void OnInterrupted_D6858A004FA1AB8DDEB894A2775AA567(class FName NotifyName);
	void OnBlendOut_D6858A004FA1AB8DDEB894A2775AA567(class FName NotifyName);
	void OnCompleted_D6858A004FA1AB8DDEB894A2775AA567(class FName NotifyName);
	void InterfaceManipulateInteractDirection(float __);
	void _____0();
	void ___r__();
	void ____();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void __B(struct FPoseLink* __B_0);
	void InterfaceJumpPressed(float* Speed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_SimpleNPC_C">();
	}
	static class UABP_SimpleNPC_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_SimpleNPC_C>();
	}
};
static_assert(alignof(UABP_SimpleNPC_C) == 0x000010, "Wrong alignment on UABP_SimpleNPC_C");
static_assert(sizeof(UABP_SimpleNPC_C) == 0x0017B0, "Wrong size on UABP_SimpleNPC_C");
static_assert(offsetof(UABP_SimpleNPC_C, UberGraphFrame) == 0x0005F0, "Member 'UABP_SimpleNPC_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_Root_1) == 0x0005F8, "Member 'UABP_SimpleNPC_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_Slot_3) == 0x000630, "Member 'UABP_SimpleNPC_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_Inertialization) == 0x000690, "Member 'UABP_SimpleNPC_C::AnimGraphNode_Inertialization' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_TransitionResult_3) == 0x000700, "Member 'UABP_SimpleNPC_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_TransitionResult_2) == 0x000728, "Member 'UABP_SimpleNPC_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_BlendSpacePlayer) == 0x000750, "Member 'UABP_SimpleNPC_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_StateResult_5) == 0x000848, "Member 'UABP_SimpleNPC_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_TransitionResult_1) == 0x000880, "Member 'UABP_SimpleNPC_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_TransitionResult) == 0x0008A8, "Member 'UABP_SimpleNPC_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_SequencePlayer_2) == 0x0008D0, "Member 'UABP_SimpleNPC_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_StateResult_4) == 0x000960, "Member 'UABP_SimpleNPC_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_SequencePlayer_1) == 0x000998, "Member 'UABP_SimpleNPC_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_StateResult_3) == 0x000A28, "Member 'UABP_SimpleNPC_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_StateMachine_3) == 0x000A60, "Member 'UABP_SimpleNPC_C::AnimGraphNode_StateMachine_3' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_StateResult_2) == 0x000BA8, "Member 'UABP_SimpleNPC_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_StateMachine_2) == 0x000BE0, "Member 'UABP_SimpleNPC_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_StateResult_1) == 0x000D28, "Member 'UABP_SimpleNPC_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_StateMachine_1) == 0x000D60, "Member 'UABP_SimpleNPC_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_StateResult) == 0x000EA8, "Member 'UABP_SimpleNPC_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_StateMachine) == 0x000EE0, "Member 'UABP_SimpleNPC_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_Slot_2) == 0x001028, "Member 'UABP_SimpleNPC_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_ApplyAdditive_1) == 0x001088, "Member 'UABP_SimpleNPC_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_Slot_1) == 0x001160, "Member 'UABP_SimpleNPC_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_ApplyAdditive) == 0x0011C0, "Member 'UABP_SimpleNPC_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_Root) == 0x001298, "Member 'UABP_SimpleNPC_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_LinkedAnimLayer) == 0x0012D0, "Member 'UABP_SimpleNPC_C::AnimGraphNode_LinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_Slot) == 0x001390, "Member 'UABP_SimpleNPC_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_SightLock) == 0x0013F0, "Member 'UABP_SimpleNPC_C::AnimGraphNode_SightLock' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_LocalToComponentSpace) == 0x0015B0, "Member 'UABP_SimpleNPC_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_ComponentToLocalSpace) == 0x0015D0, "Member 'UABP_SimpleNPC_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_SequencePlayer) == 0x0015F0, "Member 'UABP_SimpleNPC_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, AnimGraphNode_TextureFace) == 0x001680, "Member 'UABP_SimpleNPC_C::AnimGraphNode_TextureFace' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, _r__) == 0x001748, "Member 'UABP_SimpleNPC_C::_r__' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, IfPlayIdleAction) == 0x001750, "Member 'UABP_SimpleNPC_C::IfPlayIdleAction' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, IdleMontageArray) == 0x001758, "Member 'UABP_SimpleNPC_C::IdleMontageArray' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, _rMesh) == 0x001768, "Member 'UABP_SimpleNPC_C::_rMesh' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, SightDirect) == 0x001770, "Member 'UABP_SimpleNPC_C::SightDirect' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, IsBeingImpacted) == 0x00177C, "Member 'UABP_SimpleNPC_C::IsBeingImpacted' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, SightLockMode) == 0x00177D, "Member 'UABP_SimpleNPC_C::SightLockMode' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, NpcEntityId) == 0x001780, "Member 'UABP_SimpleNPC_C::NpcEntityId' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, CollisionDirection) == 0x001784, "Member 'UABP_SimpleNPC_C::CollisionDirection' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, CollisionStrength) == 0x001788, "Member 'UABP_SimpleNPC_C::CollisionStrength' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, IsBeingAttacked) == 0x00178C, "Member 'UABP_SimpleNPC_C::IsBeingAttacked' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, ExpresionAlpha) == 0x001790, "Member 'UABP_SimpleNPC_C::ExpresionAlpha' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, RandomEpresionEndTime) == 0x001794, "Member 'UABP_SimpleNPC_C::RandomEpresionEndTime' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, ______) == 0x001798, "Member 'UABP_SimpleNPC_C::______' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, Dn_______) == 0x00179C, "Member 'UABP_SimpleNPC_C::Dn_______' has a wrong offset!");
static_assert(offsetof(UABP_SimpleNPC_C, __Minus) == 0x0017A0, "Member 'UABP_SimpleNPC_C::__Minus' has a wrong offset!");

}

