#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraConfig

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CameraConfig.BP_CameraConfig_C
// 0x01E8 (0x0220 - 0x0038)
class UBP_CameraConfig_C final : public UPrimaryDataAsset
{
public:
	float                                         切换角色相机臂中心点过渡时间;                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         在水中摄像机碰撞检测起点额外高度;                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         障碍碰撞检测胶囊体半径;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输入下界_目标高_高度差;                  // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输入上界_目标高_高度差;                  // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输入下界_目标高;                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输入上界_目标高;                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输出下界_目标高;                         // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输出上界_目标高;                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输入下界_目标矮_高度差;                  // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输入上界_目标矮_高度差;                  // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输入下界_目标矮;                         // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输入上界_目标矮;                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输出下界_目标矮;                         // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         自动俯仰角输出上界_目标矮;                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         摄像机最小Pitch_目标比角色矮_;                     // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         摄像机最大Pitch_目标比角色矮_;                     // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         摄像机最小Pitch_目标比角色高_;                     // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         摄像机最大Pitch_目标比角色高_;                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         近距离范围;                                        // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         近距离修正最小角度;                                // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         近距离修正最大角度;                                // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         远距离修正最小角度;                                // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         远距离修正最大角度;                                // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         检测屏幕内MinX;                                    // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         检测屏幕内MaxX;                                    // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         检测屏幕内MinY;                                    // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         检测屏幕内MaxY;                                    // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         目标比角色更靠近镜头时额外臂长;                    // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         额外臂长系数_目标距离_;                            // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         额外臂长系数_目标高度差_;                          // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         额外臂水平偏移_目标距离_;                          // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         额外最大水平臂偏移;                                // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         角色屏幕高度参考;                                  // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         额外臂垂直偏移系数_角色屏幕高度与参考值差_;        // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         额外臂垂直偏移速度;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         额外臂垂直偏移系数_目标高度差_;                    // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         额外最大垂直臂偏移;                                // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         臂长过渡速度;                                      // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         臂偏移过渡速度;                                    // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         检测屏幕内MinX_外_;                                // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         检测屏幕内MaxX_外_;                                // 0x00DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         检测屏幕内MinY_外_;                                // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         检测屏幕内MaxY_外_;                                // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         臂旋转过渡速度;                                    // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         滚轮轴影响臂长系数;                                // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         臂长还原过渡速度;                                  // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         臂偏移还原过渡速度;                                // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         旋转还原过渡速度;                                  // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fov还原过渡速度;                                   // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         技能修正过渡时间;                                  // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G修正角度Min;                                      // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G修正角度Max;                                      // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G额外臂长系数_目标水平距离_;                       // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G额外臂长系数_目标高度差_;                         // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G额外臂长限制;                                     // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G额外臂水平偏移系数_目标水平距离_;                 // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G额外臂水平偏移上限;                               // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G额外臂垂直偏移系数_目标高度差_;                   // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         G额外臂垂直偏移上限;                               // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GInRangeMin;                                       // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GInRangeMax;                                       // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GOutRangeMin;                                      // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GOutRangeMax;                                      // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GCameraPitchMin;                                   // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GCameraPitchMax;                                   // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GCameraPitchOffset;                                // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GNearerRange;                                      // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         E修正角度Min;                                      // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         E修正角度Max;                                      // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EInRangeMin;                                       // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EInRangeMax;                                       // 0x0154(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EOutRangeMin;                                      // 0x0158(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EOutRangeMax;                                      // 0x015C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         E摄像机合法角度_移动方向_;                         // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         E移动方向合法角度_看向点方向_;                     // 0x0164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         D淡入系数;                                         // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         D淡入时间;                                         // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         D淡出速率;                                         // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         D检查旋转角度;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         D检查最小俯仰角;                                   // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         D检查最大俯仰角;                                   // 0x017C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         D调整旋转角度;                                     // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         D调整最小俯仰角;                                   // 0x0184(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         D调整最大俯仰角;                                   // 0x0188(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         D中心点偏移比例;                                   // 0x018C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         D中心点最大偏移距离;                               // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         最小上浮臂长;                                      // 0x0194(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         最大上浮臂长;                                      // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C退出攀爬淡出时间;                                 // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C无操作等待时间;                                   // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C持续移动进入修正时间;                             // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C镜头角度插值速度;                                 // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C角色移动基准速度;                                 // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C进入攀爬增加臂长;                                 // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C进入攀爬修正时间;                                 // 0x01B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C进入攀爬淡出系数;                                 // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C攀爬基准臂长;                                     // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C臂长插值速度;                                     // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C镜头预期朝向与角色移动方向夹角;                   // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C镜头预期朝向俯视角压缩倍率;                       // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C镜头预期朝向仰视角压缩倍率;                       // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         S旋转角速度插值速率;                               // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C镜头预期朝向和角色面朝方向夹角合法范围;           // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C输入粘滞时间;                                     // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         S俯仰角插值速率;                                   // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         S相机俯角偏移;                                     // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         S最大俯角;                                         // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         S最大仰角;                                         // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         S俯仰修正时间阈值;                                 // 0x01EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         弹簧臂中心点垂直插值速度;                          // 0x01F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         弹簧臂中心点垂直偏移距离上限;                      // 0x01F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         弹簧臂中心点水平插值速度;                          // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         弹簧臂中心点水平偏移距离上限;                      // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         S俯仰角加速度;                                     // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C登顶镜头插值速度;                                 // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         C登顶镜头预期Pitch;                                // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         镜头输入缓冲系数;                                  // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         镜头基准灵敏度Yaw;                                 // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         镜头基准灵敏度Pitch;                               // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         镜头输入速率Min;                                   // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         镜头输入速率Max;                                   // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CameraConfig_C">();
	}
	static class UBP_CameraConfig_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CameraConfig_C>();
	}
};
static_assert(alignof(UBP_CameraConfig_C) == 0x000008, "Wrong alignment on UBP_CameraConfig_C");
static_assert(sizeof(UBP_CameraConfig_C) == 0x000220, "Wrong size on UBP_CameraConfig_C");
static_assert(offsetof(UBP_CameraConfig_C, 切换角色相机臂中心点过渡时间) == 0x000038, "Member 'UBP_CameraConfig_C::切换角色相机臂中心点过渡时间' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 在水中摄像机碰撞检测起点额外高度) == 0x00003C, "Member 'UBP_CameraConfig_C::在水中摄像机碰撞检测起点额外高度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 障碍碰撞检测胶囊体半径) == 0x000040, "Member 'UBP_CameraConfig_C::障碍碰撞检测胶囊体半径' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输入下界_目标高_高度差) == 0x000044, "Member 'UBP_CameraConfig_C::自动俯仰角输入下界_目标高_高度差' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输入上界_目标高_高度差) == 0x000048, "Member 'UBP_CameraConfig_C::自动俯仰角输入上界_目标高_高度差' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输入下界_目标高) == 0x00004C, "Member 'UBP_CameraConfig_C::自动俯仰角输入下界_目标高' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输入上界_目标高) == 0x000050, "Member 'UBP_CameraConfig_C::自动俯仰角输入上界_目标高' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输出下界_目标高) == 0x000054, "Member 'UBP_CameraConfig_C::自动俯仰角输出下界_目标高' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输出上界_目标高) == 0x000058, "Member 'UBP_CameraConfig_C::自动俯仰角输出上界_目标高' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输入下界_目标矮_高度差) == 0x00005C, "Member 'UBP_CameraConfig_C::自动俯仰角输入下界_目标矮_高度差' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输入上界_目标矮_高度差) == 0x000060, "Member 'UBP_CameraConfig_C::自动俯仰角输入上界_目标矮_高度差' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输入下界_目标矮) == 0x000064, "Member 'UBP_CameraConfig_C::自动俯仰角输入下界_目标矮' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输入上界_目标矮) == 0x000068, "Member 'UBP_CameraConfig_C::自动俯仰角输入上界_目标矮' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输出下界_目标矮) == 0x00006C, "Member 'UBP_CameraConfig_C::自动俯仰角输出下界_目标矮' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 自动俯仰角输出上界_目标矮) == 0x000070, "Member 'UBP_CameraConfig_C::自动俯仰角输出上界_目标矮' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 摄像机最小Pitch_目标比角色矮_) == 0x000074, "Member 'UBP_CameraConfig_C::摄像机最小Pitch_目标比角色矮_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 摄像机最大Pitch_目标比角色矮_) == 0x000078, "Member 'UBP_CameraConfig_C::摄像机最大Pitch_目标比角色矮_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 摄像机最小Pitch_目标比角色高_) == 0x00007C, "Member 'UBP_CameraConfig_C::摄像机最小Pitch_目标比角色高_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 摄像机最大Pitch_目标比角色高_) == 0x000080, "Member 'UBP_CameraConfig_C::摄像机最大Pitch_目标比角色高_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 近距离范围) == 0x000084, "Member 'UBP_CameraConfig_C::近距离范围' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 近距离修正最小角度) == 0x000088, "Member 'UBP_CameraConfig_C::近距离修正最小角度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 近距离修正最大角度) == 0x00008C, "Member 'UBP_CameraConfig_C::近距离修正最大角度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 远距离修正最小角度) == 0x000090, "Member 'UBP_CameraConfig_C::远距离修正最小角度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 远距离修正最大角度) == 0x000094, "Member 'UBP_CameraConfig_C::远距离修正最大角度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 检测屏幕内MinX) == 0x000098, "Member 'UBP_CameraConfig_C::检测屏幕内MinX' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 检测屏幕内MaxX) == 0x00009C, "Member 'UBP_CameraConfig_C::检测屏幕内MaxX' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 检测屏幕内MinY) == 0x0000A0, "Member 'UBP_CameraConfig_C::检测屏幕内MinY' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 检测屏幕内MaxY) == 0x0000A4, "Member 'UBP_CameraConfig_C::检测屏幕内MaxY' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 目标比角色更靠近镜头时额外臂长) == 0x0000A8, "Member 'UBP_CameraConfig_C::目标比角色更靠近镜头时额外臂长' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 额外臂长系数_目标距离_) == 0x0000AC, "Member 'UBP_CameraConfig_C::额外臂长系数_目标距离_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 额外臂长系数_目标高度差_) == 0x0000B0, "Member 'UBP_CameraConfig_C::额外臂长系数_目标高度差_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 额外臂水平偏移_目标距离_) == 0x0000B4, "Member 'UBP_CameraConfig_C::额外臂水平偏移_目标距离_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 额外最大水平臂偏移) == 0x0000B8, "Member 'UBP_CameraConfig_C::额外最大水平臂偏移' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 角色屏幕高度参考) == 0x0000BC, "Member 'UBP_CameraConfig_C::角色屏幕高度参考' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 额外臂垂直偏移系数_角色屏幕高度与参考值差_) == 0x0000C0, "Member 'UBP_CameraConfig_C::额外臂垂直偏移系数_角色屏幕高度与参考值差_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 额外臂垂直偏移速度) == 0x0000C4, "Member 'UBP_CameraConfig_C::额外臂垂直偏移速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 额外臂垂直偏移系数_目标高度差_) == 0x0000C8, "Member 'UBP_CameraConfig_C::额外臂垂直偏移系数_目标高度差_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 额外最大垂直臂偏移) == 0x0000CC, "Member 'UBP_CameraConfig_C::额外最大垂直臂偏移' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 臂长过渡速度) == 0x0000D0, "Member 'UBP_CameraConfig_C::臂长过渡速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 臂偏移过渡速度) == 0x0000D4, "Member 'UBP_CameraConfig_C::臂偏移过渡速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 检测屏幕内MinX_外_) == 0x0000D8, "Member 'UBP_CameraConfig_C::检测屏幕内MinX_外_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 检测屏幕内MaxX_外_) == 0x0000DC, "Member 'UBP_CameraConfig_C::检测屏幕内MaxX_外_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 检测屏幕内MinY_外_) == 0x0000E0, "Member 'UBP_CameraConfig_C::检测屏幕内MinY_外_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 检测屏幕内MaxY_外_) == 0x0000E4, "Member 'UBP_CameraConfig_C::检测屏幕内MaxY_外_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 臂旋转过渡速度) == 0x0000E8, "Member 'UBP_CameraConfig_C::臂旋转过渡速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 滚轮轴影响臂长系数) == 0x0000EC, "Member 'UBP_CameraConfig_C::滚轮轴影响臂长系数' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 臂长还原过渡速度) == 0x0000F0, "Member 'UBP_CameraConfig_C::臂长还原过渡速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 臂偏移还原过渡速度) == 0x0000F4, "Member 'UBP_CameraConfig_C::臂偏移还原过渡速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 旋转还原过渡速度) == 0x0000F8, "Member 'UBP_CameraConfig_C::旋转还原过渡速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, Fov还原过渡速度) == 0x0000FC, "Member 'UBP_CameraConfig_C::Fov还原过渡速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 技能修正过渡时间) == 0x000100, "Member 'UBP_CameraConfig_C::技能修正过渡时间' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, G修正角度Min) == 0x000104, "Member 'UBP_CameraConfig_C::G修正角度Min' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, G修正角度Max) == 0x000108, "Member 'UBP_CameraConfig_C::G修正角度Max' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, G额外臂长系数_目标水平距离_) == 0x00010C, "Member 'UBP_CameraConfig_C::G额外臂长系数_目标水平距离_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, G额外臂长系数_目标高度差_) == 0x000110, "Member 'UBP_CameraConfig_C::G额外臂长系数_目标高度差_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, G额外臂长限制) == 0x000114, "Member 'UBP_CameraConfig_C::G额外臂长限制' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, G额外臂水平偏移系数_目标水平距离_) == 0x000118, "Member 'UBP_CameraConfig_C::G额外臂水平偏移系数_目标水平距离_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, G额外臂水平偏移上限) == 0x00011C, "Member 'UBP_CameraConfig_C::G额外臂水平偏移上限' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, G额外臂垂直偏移系数_目标高度差_) == 0x000120, "Member 'UBP_CameraConfig_C::G额外臂垂直偏移系数_目标高度差_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, G额外臂垂直偏移上限) == 0x000124, "Member 'UBP_CameraConfig_C::G额外臂垂直偏移上限' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, GInRangeMin) == 0x000128, "Member 'UBP_CameraConfig_C::GInRangeMin' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, GInRangeMax) == 0x00012C, "Member 'UBP_CameraConfig_C::GInRangeMax' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, GOutRangeMin) == 0x000130, "Member 'UBP_CameraConfig_C::GOutRangeMin' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, GOutRangeMax) == 0x000134, "Member 'UBP_CameraConfig_C::GOutRangeMax' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, GCameraPitchMin) == 0x000138, "Member 'UBP_CameraConfig_C::GCameraPitchMin' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, GCameraPitchMax) == 0x00013C, "Member 'UBP_CameraConfig_C::GCameraPitchMax' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, GCameraPitchOffset) == 0x000140, "Member 'UBP_CameraConfig_C::GCameraPitchOffset' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, GNearerRange) == 0x000144, "Member 'UBP_CameraConfig_C::GNearerRange' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, E修正角度Min) == 0x000148, "Member 'UBP_CameraConfig_C::E修正角度Min' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, E修正角度Max) == 0x00014C, "Member 'UBP_CameraConfig_C::E修正角度Max' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, EInRangeMin) == 0x000150, "Member 'UBP_CameraConfig_C::EInRangeMin' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, EInRangeMax) == 0x000154, "Member 'UBP_CameraConfig_C::EInRangeMax' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, EOutRangeMin) == 0x000158, "Member 'UBP_CameraConfig_C::EOutRangeMin' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, EOutRangeMax) == 0x00015C, "Member 'UBP_CameraConfig_C::EOutRangeMax' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, E摄像机合法角度_移动方向_) == 0x000160, "Member 'UBP_CameraConfig_C::E摄像机合法角度_移动方向_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, E移动方向合法角度_看向点方向_) == 0x000164, "Member 'UBP_CameraConfig_C::E移动方向合法角度_看向点方向_' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, D淡入系数) == 0x000168, "Member 'UBP_CameraConfig_C::D淡入系数' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, D淡入时间) == 0x00016C, "Member 'UBP_CameraConfig_C::D淡入时间' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, D淡出速率) == 0x000170, "Member 'UBP_CameraConfig_C::D淡出速率' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, D检查旋转角度) == 0x000174, "Member 'UBP_CameraConfig_C::D检查旋转角度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, D检查最小俯仰角) == 0x000178, "Member 'UBP_CameraConfig_C::D检查最小俯仰角' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, D检查最大俯仰角) == 0x00017C, "Member 'UBP_CameraConfig_C::D检查最大俯仰角' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, D调整旋转角度) == 0x000180, "Member 'UBP_CameraConfig_C::D调整旋转角度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, D调整最小俯仰角) == 0x000184, "Member 'UBP_CameraConfig_C::D调整最小俯仰角' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, D调整最大俯仰角) == 0x000188, "Member 'UBP_CameraConfig_C::D调整最大俯仰角' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, D中心点偏移比例) == 0x00018C, "Member 'UBP_CameraConfig_C::D中心点偏移比例' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, D中心点最大偏移距离) == 0x000190, "Member 'UBP_CameraConfig_C::D中心点最大偏移距离' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 最小上浮臂长) == 0x000194, "Member 'UBP_CameraConfig_C::最小上浮臂长' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 最大上浮臂长) == 0x000198, "Member 'UBP_CameraConfig_C::最大上浮臂长' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C退出攀爬淡出时间) == 0x00019C, "Member 'UBP_CameraConfig_C::C退出攀爬淡出时间' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C无操作等待时间) == 0x0001A0, "Member 'UBP_CameraConfig_C::C无操作等待时间' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C持续移动进入修正时间) == 0x0001A4, "Member 'UBP_CameraConfig_C::C持续移动进入修正时间' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C镜头角度插值速度) == 0x0001A8, "Member 'UBP_CameraConfig_C::C镜头角度插值速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C角色移动基准速度) == 0x0001AC, "Member 'UBP_CameraConfig_C::C角色移动基准速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C进入攀爬增加臂长) == 0x0001B0, "Member 'UBP_CameraConfig_C::C进入攀爬增加臂长' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C进入攀爬修正时间) == 0x0001B4, "Member 'UBP_CameraConfig_C::C进入攀爬修正时间' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C进入攀爬淡出系数) == 0x0001B8, "Member 'UBP_CameraConfig_C::C进入攀爬淡出系数' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C攀爬基准臂长) == 0x0001BC, "Member 'UBP_CameraConfig_C::C攀爬基准臂长' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C臂长插值速度) == 0x0001C0, "Member 'UBP_CameraConfig_C::C臂长插值速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C镜头预期朝向与角色移动方向夹角) == 0x0001C4, "Member 'UBP_CameraConfig_C::C镜头预期朝向与角色移动方向夹角' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C镜头预期朝向俯视角压缩倍率) == 0x0001C8, "Member 'UBP_CameraConfig_C::C镜头预期朝向俯视角压缩倍率' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C镜头预期朝向仰视角压缩倍率) == 0x0001CC, "Member 'UBP_CameraConfig_C::C镜头预期朝向仰视角压缩倍率' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, S旋转角速度插值速率) == 0x0001D0, "Member 'UBP_CameraConfig_C::S旋转角速度插值速率' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C镜头预期朝向和角色面朝方向夹角合法范围) == 0x0001D4, "Member 'UBP_CameraConfig_C::C镜头预期朝向和角色面朝方向夹角合法范围' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C输入粘滞时间) == 0x0001D8, "Member 'UBP_CameraConfig_C::C输入粘滞时间' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, S俯仰角插值速率) == 0x0001DC, "Member 'UBP_CameraConfig_C::S俯仰角插值速率' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, S相机俯角偏移) == 0x0001E0, "Member 'UBP_CameraConfig_C::S相机俯角偏移' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, S最大俯角) == 0x0001E4, "Member 'UBP_CameraConfig_C::S最大俯角' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, S最大仰角) == 0x0001E8, "Member 'UBP_CameraConfig_C::S最大仰角' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, S俯仰修正时间阈值) == 0x0001EC, "Member 'UBP_CameraConfig_C::S俯仰修正时间阈值' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 弹簧臂中心点垂直插值速度) == 0x0001F0, "Member 'UBP_CameraConfig_C::弹簧臂中心点垂直插值速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 弹簧臂中心点垂直偏移距离上限) == 0x0001F4, "Member 'UBP_CameraConfig_C::弹簧臂中心点垂直偏移距离上限' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 弹簧臂中心点水平插值速度) == 0x0001F8, "Member 'UBP_CameraConfig_C::弹簧臂中心点水平插值速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 弹簧臂中心点水平偏移距离上限) == 0x0001FC, "Member 'UBP_CameraConfig_C::弹簧臂中心点水平偏移距离上限' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, S俯仰角加速度) == 0x000200, "Member 'UBP_CameraConfig_C::S俯仰角加速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C登顶镜头插值速度) == 0x000204, "Member 'UBP_CameraConfig_C::C登顶镜头插值速度' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, C登顶镜头预期Pitch) == 0x000208, "Member 'UBP_CameraConfig_C::C登顶镜头预期Pitch' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 镜头输入缓冲系数) == 0x00020C, "Member 'UBP_CameraConfig_C::镜头输入缓冲系数' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 镜头基准灵敏度Yaw) == 0x000210, "Member 'UBP_CameraConfig_C::镜头基准灵敏度Yaw' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 镜头基准灵敏度Pitch) == 0x000214, "Member 'UBP_CameraConfig_C::镜头基准灵敏度Pitch' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 镜头输入速率Min) == 0x000218, "Member 'UBP_CameraConfig_C::镜头输入速率Min' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfig_C, 镜头输入速率Max) == 0x00021C, "Member 'UBP_CameraConfig_C::镜头输入速率Max' has a wrong offset!");

}

