#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Audio_Multi_Base

#include "Basic.hpp"

#include "Audio_Multi_Base_classes.hpp"
#include "Audio_Multi_Base_parameters.hpp"


namespace SDK
{

// Function Audio_Multi_Base.Audio_Multi_Base_C.ExecuteUbergraph_Audio_Multi_Base
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAudio_Multi_Base_C::ExecuteUbergraph_Audio_Multi_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "ExecuteUbergraph_Audio_Multi_Base");

	Params::Audio_Multi_Base_C_ExecuteUbergraph_Audio_Multi_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAudio_Multi_Base_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "ReceiveEndPlay");

	Params::Audio_Multi_Base_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AAudio_Multi_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.可视化
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::可视化()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "可视化");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.根据内径缩放衰减因子
// (Public, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::根据内径缩放衰减因子()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "根据内径缩放衰减因子");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.流送距离计算
// (Public, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::流送距离计算()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "流送距离计算");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.清除可视化
// (Public, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::清除可视化()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "清除可视化");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.Play
// (Public, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "Play");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.Stop
// (Public, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "Stop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.衰减半径缩放因子计算
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   衰减半径                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAudio_Multi_Base_C::衰减半径缩放因子计算(float* 衰减半径)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "衰减半径缩放因子计算");

	Params::Audio_Multi_Base_C_衰减半径缩放因子计算 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (衰减半径 != nullptr)
		*衰减半径 = Parms.衰减半径;
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.打印
// (Public, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::打印()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "打印");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.获取中心点
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          中心点                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AAudio_Multi_Base_C::获取中心点(struct FVector* 中心点)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "获取中心点");

	Params::Audio_Multi_Base_C_获取中心点 Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (中心点 != nullptr)
		*中心点 = std::move(Parms.中心点);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.显示流送距离
// (Public, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::显示流送距离()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "显示流送距离");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.重设中心点
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::重设中心点()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "重设中心点");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.GamePlay
// (Public, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::GamePlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "GamePlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.Show
// (Public, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "Show");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Audio_Multi_Base.Audio_Multi_Base_C.Hide
// (Public, BlueprintCallable, BlueprintEvent)

void AAudio_Multi_Base_C::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Audio_Multi_Base_C", "Hide");

	UObject::ProcessEvent(Func, nullptr);
}

}

