#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Jump_dbo

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GA_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Jump_dbo.GA_Jump_dbo_C
// 0x0110 (0x0668 - 0x0558)
class UGA_Jump_dbo_C final : public UGA_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_GA_Jump_dbo_C;                      // 0x0558(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCurveFloat*                            跳跃曲线X;                                         // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            跳跃曲线Z;                                         // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          跳跃点位置;                                        // 0x0570(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            z乘积曲线;                                         // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            z加和曲线;                                         // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            补高曲线;                                          // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         高度调整系数;                                      // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A4[0x4];                                      // 0x05A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          最终位置;                                          // 0x05A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            z世界高度控制曲线;                                 // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         蒙太奇Rate;                                        // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5CC[0x4];                                      // 0x05CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVectorDouble                          起跳点;                                            // 0x05D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        X位置;                                             // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Y位置;                                             // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Z位置;                                             // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         技能动画Index;                                     // 0x0600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        跳跃距离;                                          // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            跳跃曲线X_速度算法;                                // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            跳跃曲线Z_速度算法;                                // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        高度缓存_速度算法;                                 // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Tick停止;                                          // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        xy缓存_速度算法;                                   // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            One1;                                              // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         开始运动时间;                                      // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         总运动时长;                                        // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVectorDouble                          最终位置_对比缓存;                                 // 0x0648(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGameplayTask_WaitDelay*                异步任务;                                          // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Jump_dbo(int32 EntryPoint);
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_ActivateAbility();
	void OnCompleted_5D118C384AE61F1C80292E81FE007CD7();
	void OnBlendOut_5D118C384AE61F1C80292E81FE007CD7();
	void OnInterrupted_5D118C384AE61F1C80292E81FE007CD7();
	void OnCancelled_5D118C384AE61F1C80292E81FE007CD7();
	void OnTick_5D118C384AE61F1C80292E81FE007CD7();
	void OnCompleted_5D118C384AE61F1C80292E81FA4FACE0();
	void OnBlendOut_5D118C384AE61F1C80292E81FA4FACE0();
	void OnInterrupted_5D118C384AE61F1C80292E81FA4FACE0();
	void OnCancelled_5D118C384AE61F1C80292E81FA4FACE0();
	void OnTick_5D118C384AE61F1C80292E81FA4FACE0();
	void OnCompleted_5D118C384AE61F1C80292E81D450ACF9();
	void OnBlendOut_5D118C384AE61F1C80292E81D450ACF9();
	void OnInterrupted_5D118C384AE61F1C80292E81D450ACF9();
	void OnCancelled_5D118C384AE61F1C80292E81D450ACF9();
	void OnTick_5D118C384AE61F1C80292E81D450ACF9();
	void OnTick_8D96293640861CE3D30811B26B296056();
	void OnFinish_8D96293640861CE3D30811B26B296056();
	void OnCompleted_5D118C384AE61F1C80292E818ACC2E8E();
	void OnBlendOut_5D118C384AE61F1C80292E818ACC2E8E();
	void OnInterrupted_5D118C384AE61F1C80292E818ACC2E8E();
	void OnCancelled_5D118C384AE61F1C80292E818ACC2E8E();
	void OnTick_5D118C384AE61F1C80292E818ACC2E8E();
	void 新函数_0();
	void 设置角色位置1(class ATsBaseCharacter_C* 角色, const struct FVectorDouble& Location, bool Sweep, const class FString& Context, bool* Return_Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Jump_dbo_C">();
	}
	static class UGA_Jump_dbo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Jump_dbo_C>();
	}
};
static_assert(alignof(UGA_Jump_dbo_C) == 0x000008, "Wrong alignment on UGA_Jump_dbo_C");
static_assert(sizeof(UGA_Jump_dbo_C) == 0x000668, "Wrong size on UGA_Jump_dbo_C");
static_assert(offsetof(UGA_Jump_dbo_C, UberGraphFrame_GA_Jump_dbo_C) == 0x000558, "Member 'UGA_Jump_dbo_C::UberGraphFrame_GA_Jump_dbo_C' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 跳跃曲线X) == 0x000560, "Member 'UGA_Jump_dbo_C::跳跃曲线X' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 跳跃曲线Z) == 0x000568, "Member 'UGA_Jump_dbo_C::跳跃曲线Z' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 跳跃点位置) == 0x000570, "Member 'UGA_Jump_dbo_C::跳跃点位置' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, z乘积曲线) == 0x000588, "Member 'UGA_Jump_dbo_C::z乘积曲线' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, z加和曲线) == 0x000590, "Member 'UGA_Jump_dbo_C::z加和曲线' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 补高曲线) == 0x000598, "Member 'UGA_Jump_dbo_C::补高曲线' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 高度调整系数) == 0x0005A0, "Member 'UGA_Jump_dbo_C::高度调整系数' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 最终位置) == 0x0005A8, "Member 'UGA_Jump_dbo_C::最终位置' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, z世界高度控制曲线) == 0x0005C0, "Member 'UGA_Jump_dbo_C::z世界高度控制曲线' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 蒙太奇Rate) == 0x0005C8, "Member 'UGA_Jump_dbo_C::蒙太奇Rate' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 起跳点) == 0x0005D0, "Member 'UGA_Jump_dbo_C::起跳点' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, X位置) == 0x0005E8, "Member 'UGA_Jump_dbo_C::X位置' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, Y位置) == 0x0005F0, "Member 'UGA_Jump_dbo_C::Y位置' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, Z位置) == 0x0005F8, "Member 'UGA_Jump_dbo_C::Z位置' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 技能动画Index) == 0x000600, "Member 'UGA_Jump_dbo_C::技能动画Index' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 跳跃距离) == 0x000608, "Member 'UGA_Jump_dbo_C::跳跃距离' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 跳跃曲线X_速度算法) == 0x000610, "Member 'UGA_Jump_dbo_C::跳跃曲线X_速度算法' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 跳跃曲线Z_速度算法) == 0x000618, "Member 'UGA_Jump_dbo_C::跳跃曲线Z_速度算法' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 高度缓存_速度算法) == 0x000620, "Member 'UGA_Jump_dbo_C::高度缓存_速度算法' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, Tick停止) == 0x000628, "Member 'UGA_Jump_dbo_C::Tick停止' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, xy缓存_速度算法) == 0x000630, "Member 'UGA_Jump_dbo_C::xy缓存_速度算法' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, One1) == 0x000638, "Member 'UGA_Jump_dbo_C::One1' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 开始运动时间) == 0x000640, "Member 'UGA_Jump_dbo_C::开始运动时间' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 总运动时长) == 0x000644, "Member 'UGA_Jump_dbo_C::总运动时长' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 最终位置_对比缓存) == 0x000648, "Member 'UGA_Jump_dbo_C::最终位置_对比缓存' has a wrong offset!");
static_assert(offsetof(UGA_Jump_dbo_C, 异步任务) == 0x000660, "Member 'UGA_Jump_dbo_C::异步任务' has a wrong offset!");

}

