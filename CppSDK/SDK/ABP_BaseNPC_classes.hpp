#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_BaseNPC

#include "Basic.hpp"

#include "ECharState_structs.hpp"
#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroAnim_structs.hpp"
#include "KuroAnim_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_BaseNPC.ABP_BaseNPC_C
// 0x1B60 (0x2150 - 0x05F0)
class UABP_BaseNPC_C : public UKuroAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x05F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root_1;                              // 0x05F8(0x0038)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_5;                              // 0x0630(0x0060)()
	struct FAnimNode_Inertialization              AnimGraphNode_Inertialization;                     // 0x0690(0x0070)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_13;                 // 0x0700(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_12;                 // 0x0728(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_11;                 // 0x0750(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_10;                 // 0x0778(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_9;                  // 0x07A0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_8;                  // 0x07C8(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_7;                    // 0x07F0(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_11;                      // 0x0880(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_6;                    // 0x08B8(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_10;                      // 0x0948(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_5;                    // 0x0980(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_9;                       // 0x0A10(0x0038)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer_1;                  // 0x0A48(0x00F8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_8;                       // 0x0B40(0x0038)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_7;                  // 0x0B78(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_6;                  // 0x0BA0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_5;                  // 0x0BC8(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_4;                  // 0x0BF0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_3;                  // 0x0C18(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_2;                  // 0x0C40(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0C68(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0C90(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_4;                    // 0x0CB8(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_7;                       // 0x0D48(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_3;                    // 0x0D80(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_6;                       // 0x0E10(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_2;                    // 0x0E48(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_5;                       // 0x0ED8(0x0038)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0F10(0x0090)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_4;                       // 0x0FA0(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_3;                      // 0x0FD8(0x0148)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_3;                       // 0x1120(0x0038)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x1158(0x00F8)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_2;                       // 0x1250(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_2;                      // 0x1288(0x0148)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x13D0(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine_1;                      // 0x1408(0x0148)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x1550(0x0038)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x1588(0x0148)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_4;                              // 0x16D0(0x0060)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive_1;                     // 0x1730(0x00D8)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_3;                              // 0x1808(0x0060)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x1868(0x00D8)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x1940(0x0038)()
	struct FAnimNode_LinkedAnimLayer              AnimGraphNode_LinkedAnimLayer;                     // 0x1978(0x00C0)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_2;                              // 0x1A38(0x0060)()
	struct FAnimNode_SightLock                    AnimGraphNode_SightLock;                           // 0x1A98(0x01C0)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x1C58(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x1C78(0x0020)()
	uint8                                         Pad_1C98[0x8];                                     // 0x1C98(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimNode_RBF                          AnimGraphNode_RBF;                                 // 0x1CA0(0x0150)()
	struct FAnimNode_CombineCurves                AnimGraphNode_CombineCurves_1;                     // 0x1DF0(0x0060)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot_1;                              // 0x1E50(0x0060)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x1EB0(0x0090)()
	struct FAnimNode_CombineCurves                AnimGraphNode_CombineCurves;                       // 0x1F40(0x0060)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x1FA0(0x0060)()
	struct FAnimNode_TextureFace                  AnimGraphNode_TextureFace;                         // 0x2000(0x00C8)(ContainsInstancedReference)
	class ABP_BaseNPC_C*                          _r__;                                              // 0x20C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ___e__;                                            // 0x20D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         __;                                                // 0x20DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _____e;                                            // 0x20E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IfPlayIdleAction;                                  // 0x20E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_20E2[0x6];                                     // 0x20E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   IdleMontageArray;                                  // 0x20E8(0x0010)(Edit, BlueprintVisible)
	class USkeletalMeshComponent*                 _rMesh;                                            // 0x20F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __0l_;                                             // 0x2100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2101[0x3];                                     // 0x2101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _l____;                                            // 0x2104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____l__;                                           // 0x2108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SightDirect;                                       // 0x210C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBeingImpacted;                                   // 0x2118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsBeingAttacked;                                   // 0x2119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	ESightLockMode                                SightLockMode;                                     // 0x211A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_211B[0x1];                                     // 0x211B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         P___;                                              // 0x211C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTurnLeft;                                        // 0x2120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2121[0x3];                                     // 0x2121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               _r_l;                                              // 0x2124(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	int32                                         NpcEntityId;                                       // 0x2130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionStrength;                                 // 0x2134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionDirection;                                // 0x2138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RandomEpresionEndTime;                             // 0x213C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ______;                                            // 0x2140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dn_______;                                         // 0x2144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ExpresionAlpha;                                    // 0x2148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          __Minus;                                           // 0x214C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Cache_0l_;                                         // 0x214D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_ABP_BaseNPC(int32 EntryPoint);
	void AnimNotify_OnHitAnimEnd();
	void AnimNotify_OnHitAnimBegin();
	void AnimNotify_OnCollisionAnimBegin();
	void AnimNotify_OnCollisionAnimEnd();
	void ClimbDash();
	void InterfaceSimulateJump(float Speed);
	void InterfaceFixHookDirect(const struct FVector& Offset);
	void OnComponentStart();
	void AnimNotify_PlayMontage();
	void InterfaceManipulateInteractDirection(float ___0);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintInitializeAnimation();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_9C70E8254D0EAC25ED9262AE4741EA01();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_29ED077D4A98A4CA0111C685D4416D03();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_FDBBD5E7477AD7967C489DA71407AA47();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_489651114DF56F56400B5085D579A175();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_2178FF404602F078D81CDF8AB475F43F();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_6917C8F64FE3C0CDC8A3E6A7ED7D503C();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_0965F59C484C38E57DB2959A3E4DB3D7();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_C0B8FDED431127A2A5FDC1A72CAE78C2();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TextureFace_C2CE9AB24BDEE4700DCED0ADCBA33FA8();
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BaseNPC_AnimGraphNode_TransitionResult_2C6793D9468B9D59C335F9B7E06CA14C();
	void OnNotifyEnd_712E5DC7440577B25761868E65201677(class FName NotifyName);
	void OnNotifyBegin_712E5DC7440577B25761868E65201677(class FName NotifyName);
	void OnInterrupted_712E5DC7440577B25761868E65201677(class FName NotifyName);
	void OnBlendOut_712E5DC7440577B25761868E65201677(class FName NotifyName);
	void OnCompleted_712E5DC7440577B25761868E65201677(class FName NotifyName);
	void ___r_o();
	void _____0();
	void ___r___0();
	void ___r__();
	void ___rl_();
	void _AIq_(bool* Result);
	void HasInputRotate(bool* Output_Get);
	void ____();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void __B(struct FPoseLink* __B_0);
	void InterfaceJumpPressed(float* Speed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_BaseNPC_C">();
	}
	static class UABP_BaseNPC_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_BaseNPC_C>();
	}
};
static_assert(alignof(UABP_BaseNPC_C) == 0x000010, "Wrong alignment on UABP_BaseNPC_C");
static_assert(sizeof(UABP_BaseNPC_C) == 0x002150, "Wrong size on UABP_BaseNPC_C");
static_assert(offsetof(UABP_BaseNPC_C, UberGraphFrame) == 0x0005F0, "Member 'UABP_BaseNPC_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Root_1) == 0x0005F8, "Member 'UABP_BaseNPC_C::AnimGraphNode_Root_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot_5) == 0x000630, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot_5' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Inertialization) == 0x000690, "Member 'UABP_BaseNPC_C::AnimGraphNode_Inertialization' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_13) == 0x000700, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_13' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_12) == 0x000728, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_12' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_11) == 0x000750, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_11' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_10) == 0x000778, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_10' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_9) == 0x0007A0, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_9' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_8) == 0x0007C8, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_8' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_7) == 0x0007F0, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_7' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_11) == 0x000880, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_11' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_6) == 0x0008B8, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_6' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_10) == 0x000948, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_10' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_5) == 0x000980, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_5' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_9) == 0x000A10, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_9' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_BlendSpacePlayer_1) == 0x000A48, "Member 'UABP_BaseNPC_C::AnimGraphNode_BlendSpacePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_8) == 0x000B40, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_8' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_7) == 0x000B78, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_7' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_6) == 0x000BA0, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_6' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_5) == 0x000BC8, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_5' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_4) == 0x000BF0, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_4' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_3) == 0x000C18, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_3' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_2) == 0x000C40, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_2' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult_1) == 0x000C68, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TransitionResult) == 0x000C90, "Member 'UABP_BaseNPC_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_4) == 0x000CB8, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_4' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_7) == 0x000D48, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_7' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_3) == 0x000D80, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_3' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_6) == 0x000E10, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_6' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_2) == 0x000E48, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_2' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_5) == 0x000ED8, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_5' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer_1) == 0x000F10, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_4) == 0x000FA0, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_4' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateMachine_3) == 0x000FD8, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateMachine_3' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_3) == 0x001120, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_3' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_BlendSpacePlayer) == 0x001158, "Member 'UABP_BaseNPC_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_2) == 0x001250, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_2' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateMachine_2) == 0x001288, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateMachine_2' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult_1) == 0x0013D0, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateMachine_1) == 0x001408, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateMachine_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateResult) == 0x001550, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_StateMachine) == 0x001588, "Member 'UABP_BaseNPC_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot_4) == 0x0016D0, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot_4' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_ApplyAdditive_1) == 0x001730, "Member 'UABP_BaseNPC_C::AnimGraphNode_ApplyAdditive_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot_3) == 0x001808, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot_3' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_ApplyAdditive) == 0x001868, "Member 'UABP_BaseNPC_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Root) == 0x001940, "Member 'UABP_BaseNPC_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_LinkedAnimLayer) == 0x001978, "Member 'UABP_BaseNPC_C::AnimGraphNode_LinkedAnimLayer' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot_2) == 0x001A38, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot_2' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SightLock) == 0x001A98, "Member 'UABP_BaseNPC_C::AnimGraphNode_SightLock' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_LocalToComponentSpace) == 0x001C58, "Member 'UABP_BaseNPC_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_ComponentToLocalSpace) == 0x001C78, "Member 'UABP_BaseNPC_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_RBF) == 0x001CA0, "Member 'UABP_BaseNPC_C::AnimGraphNode_RBF' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_CombineCurves_1) == 0x001DF0, "Member 'UABP_BaseNPC_C::AnimGraphNode_CombineCurves_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot_1) == 0x001E50, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot_1' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_SequencePlayer) == 0x001EB0, "Member 'UABP_BaseNPC_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_CombineCurves) == 0x001F40, "Member 'UABP_BaseNPC_C::AnimGraphNode_CombineCurves' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_Slot) == 0x001FA0, "Member 'UABP_BaseNPC_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, AnimGraphNode_TextureFace) == 0x002000, "Member 'UABP_BaseNPC_C::AnimGraphNode_TextureFace' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, _r__) == 0x0020C8, "Member 'UABP_BaseNPC_C::_r__' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, ___e__) == 0x0020D0, "Member 'UABP_BaseNPC_C::___e__' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, __) == 0x0020DC, "Member 'UABP_BaseNPC_C::__' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, _____e) == 0x0020E0, "Member 'UABP_BaseNPC_C::_____e' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, IfPlayIdleAction) == 0x0020E1, "Member 'UABP_BaseNPC_C::IfPlayIdleAction' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, IdleMontageArray) == 0x0020E8, "Member 'UABP_BaseNPC_C::IdleMontageArray' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, _rMesh) == 0x0020F8, "Member 'UABP_BaseNPC_C::_rMesh' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, __0l_) == 0x002100, "Member 'UABP_BaseNPC_C::__0l_' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, _l____) == 0x002104, "Member 'UABP_BaseNPC_C::_l____' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, ____l__) == 0x002108, "Member 'UABP_BaseNPC_C::____l__' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, SightDirect) == 0x00210C, "Member 'UABP_BaseNPC_C::SightDirect' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, IsBeingImpacted) == 0x002118, "Member 'UABP_BaseNPC_C::IsBeingImpacted' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, IsBeingAttacked) == 0x002119, "Member 'UABP_BaseNPC_C::IsBeingAttacked' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, SightLockMode) == 0x00211A, "Member 'UABP_BaseNPC_C::SightLockMode' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, P___) == 0x00211C, "Member 'UABP_BaseNPC_C::P___' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, IsTurnLeft) == 0x002120, "Member 'UABP_BaseNPC_C::IsTurnLeft' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, _r_l) == 0x002124, "Member 'UABP_BaseNPC_C::_r_l' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, NpcEntityId) == 0x002130, "Member 'UABP_BaseNPC_C::NpcEntityId' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, CollisionStrength) == 0x002134, "Member 'UABP_BaseNPC_C::CollisionStrength' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, CollisionDirection) == 0x002138, "Member 'UABP_BaseNPC_C::CollisionDirection' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, RandomEpresionEndTime) == 0x00213C, "Member 'UABP_BaseNPC_C::RandomEpresionEndTime' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, ______) == 0x002140, "Member 'UABP_BaseNPC_C::______' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, Dn_______) == 0x002144, "Member 'UABP_BaseNPC_C::Dn_______' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, ExpresionAlpha) == 0x002148, "Member 'UABP_BaseNPC_C::ExpresionAlpha' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, __Minus) == 0x00214C, "Member 'UABP_BaseNPC_C::__Minus' has a wrong offset!");
static_assert(offsetof(UABP_BaseNPC_C, Cache_0l_) == 0x00214D, "Member 'UABP_BaseNPC_C::Cache_0l_' has a wrong offset!");

}

