#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SceneLensflare

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "KuroRenderingRuntimeBPPlugin_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SceneLensflare.BP_SceneLensflare_C
// 0x00F8 (0x0450 - 0x0358)
class ABP_SceneLensflare_C final : public ALensflareSamplerActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0358(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       VisibleSphere;                                     // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       OccludeSphere;                                     // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          自定义Ghost;                                       // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Ghost_大小;                                        // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ghost_分布偏移;                                    // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ghost_分布范围;                                    // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Ghost_调色;                                        // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ghost_不透明度;                                    // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          自定义Halo;                                        // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Halo_圆环衰减;                                     // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Halo_大小;                                         // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Halo_分布偏移;                                     // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Halo_分布范围;                                     // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Halo_调色;                                         // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Halo_不透明度;                                     // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          自定义Glare;                                       // 0x03BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BD[0x3];                                      // 0x03BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Glare_大小;                                        // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Glare_调色;                                        // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Glare_不透明度;                                    // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Glare_旋转;                                        // 0x03DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Glare_锁定动态旋转;                                // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ghost_受背景色影响;                                // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Halo_受背景色影响;                                 // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Glare_受背景色影响;                                // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ghost_视角衰减速度;                                // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Halo_视角衰减速度;                                 // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Glare_视角衰减速度;                                // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ghost_使用固定旋转;                                // 0x03FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FD[0x3];                                      // 0x03FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Ghost_固定旋转值;                                  // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          自定义Ghost贴图;                                   // 0x0404(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_405[0x3];                                      // 0x0405(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Ghost贴图;                                         // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Halo_使用固定旋转;                                 // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0x3];                                      // 0x0411(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Halo_固定旋转值;                                   // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          自定义Halo贴图;                                    // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Halo贴图;                                          // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          自定义Glare贴图;                                   // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Glare贴图;                                         // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Glare_UV缩放_偏移;                                 // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         衰减系数;                                          // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         屏占比剔除阈值;                                    // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SceneLensflare(int32 EntryPoint);
	void ApplyDynamicMaterialGlare(class UMaterialInstanceDynamic* DynMaterial);
	void ApplyDynamicMaterialHalo(class UMaterialInstanceDynamic* DynMaterial);
	void ApplyDynamicMaterialGhost(class UMaterialInstanceDynamic* DynMaterial);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SceneLensflare_C">();
	}
	static class ABP_SceneLensflare_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SceneLensflare_C>();
	}
};
static_assert(alignof(ABP_SceneLensflare_C) == 0x000008, "Wrong alignment on ABP_SceneLensflare_C");
static_assert(sizeof(ABP_SceneLensflare_C) == 0x000450, "Wrong size on ABP_SceneLensflare_C");
static_assert(offsetof(ABP_SceneLensflare_C, UberGraphFrame) == 0x000358, "Member 'ABP_SceneLensflare_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, VisibleSphere) == 0x000360, "Member 'ABP_SceneLensflare_C::VisibleSphere' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, OccludeSphere) == 0x000368, "Member 'ABP_SceneLensflare_C::OccludeSphere' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, 自定义Ghost) == 0x000370, "Member 'ABP_SceneLensflare_C::自定义Ghost' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Ghost_大小) == 0x000374, "Member 'ABP_SceneLensflare_C::Ghost_大小' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Ghost_分布偏移) == 0x000378, "Member 'ABP_SceneLensflare_C::Ghost_分布偏移' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Ghost_分布范围) == 0x00037C, "Member 'ABP_SceneLensflare_C::Ghost_分布范围' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Ghost_调色) == 0x000380, "Member 'ABP_SceneLensflare_C::Ghost_调色' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Ghost_不透明度) == 0x000390, "Member 'ABP_SceneLensflare_C::Ghost_不透明度' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, 自定义Halo) == 0x000394, "Member 'ABP_SceneLensflare_C::自定义Halo' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Halo_圆环衰减) == 0x000398, "Member 'ABP_SceneLensflare_C::Halo_圆环衰减' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Halo_大小) == 0x00039C, "Member 'ABP_SceneLensflare_C::Halo_大小' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Halo_分布偏移) == 0x0003A0, "Member 'ABP_SceneLensflare_C::Halo_分布偏移' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Halo_分布范围) == 0x0003A4, "Member 'ABP_SceneLensflare_C::Halo_分布范围' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Halo_调色) == 0x0003A8, "Member 'ABP_SceneLensflare_C::Halo_调色' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Halo_不透明度) == 0x0003B8, "Member 'ABP_SceneLensflare_C::Halo_不透明度' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, 自定义Glare) == 0x0003BC, "Member 'ABP_SceneLensflare_C::自定义Glare' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Glare_大小) == 0x0003C0, "Member 'ABP_SceneLensflare_C::Glare_大小' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Glare_调色) == 0x0003C8, "Member 'ABP_SceneLensflare_C::Glare_调色' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Glare_不透明度) == 0x0003D8, "Member 'ABP_SceneLensflare_C::Glare_不透明度' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Glare_旋转) == 0x0003DC, "Member 'ABP_SceneLensflare_C::Glare_旋转' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Glare_锁定动态旋转) == 0x0003E0, "Member 'ABP_SceneLensflare_C::Glare_锁定动态旋转' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Ghost_受背景色影响) == 0x0003E4, "Member 'ABP_SceneLensflare_C::Ghost_受背景色影响' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Halo_受背景色影响) == 0x0003E8, "Member 'ABP_SceneLensflare_C::Halo_受背景色影响' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Glare_受背景色影响) == 0x0003EC, "Member 'ABP_SceneLensflare_C::Glare_受背景色影响' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Ghost_视角衰减速度) == 0x0003F0, "Member 'ABP_SceneLensflare_C::Ghost_视角衰减速度' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Halo_视角衰减速度) == 0x0003F4, "Member 'ABP_SceneLensflare_C::Halo_视角衰减速度' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Glare_视角衰减速度) == 0x0003F8, "Member 'ABP_SceneLensflare_C::Glare_视角衰减速度' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Ghost_使用固定旋转) == 0x0003FC, "Member 'ABP_SceneLensflare_C::Ghost_使用固定旋转' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Ghost_固定旋转值) == 0x000400, "Member 'ABP_SceneLensflare_C::Ghost_固定旋转值' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, 自定义Ghost贴图) == 0x000404, "Member 'ABP_SceneLensflare_C::自定义Ghost贴图' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Ghost贴图) == 0x000408, "Member 'ABP_SceneLensflare_C::Ghost贴图' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Halo_使用固定旋转) == 0x000410, "Member 'ABP_SceneLensflare_C::Halo_使用固定旋转' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Halo_固定旋转值) == 0x000414, "Member 'ABP_SceneLensflare_C::Halo_固定旋转值' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, 自定义Halo贴图) == 0x000418, "Member 'ABP_SceneLensflare_C::自定义Halo贴图' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Halo贴图) == 0x000420, "Member 'ABP_SceneLensflare_C::Halo贴图' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, 自定义Glare贴图) == 0x000428, "Member 'ABP_SceneLensflare_C::自定义Glare贴图' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Glare贴图) == 0x000430, "Member 'ABP_SceneLensflare_C::Glare贴图' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, Glare_UV缩放_偏移) == 0x000438, "Member 'ABP_SceneLensflare_C::Glare_UV缩放_偏移' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, 衰减系数) == 0x000448, "Member 'ABP_SceneLensflare_C::衰减系数' has a wrong offset!");
static_assert(offsetof(ABP_SceneLensflare_C, 屏占比剔除阈值) == 0x00044C, "Member 'ABP_SceneLensflare_C::屏占比剔除阈值' has a wrong offset!");

}

