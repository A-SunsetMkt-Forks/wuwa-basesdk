#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Input_Zhezhi

#include "Basic.hpp"

#include "sInputCommand_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function BP_Input_Zhezhi.BP_Input_Zhezhi_C.攻击按下
// 0x0238 (0x0238 - 0x0000)
struct BP_Input_Zhezhi_C_攻击按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Loop_Counter_Variable;                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x001C(0x0014)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0034(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0048(0x0020)()
	int32                                         ___int_Variable;                                   // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTagCount_ReturnValue;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0074(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1; // 0x0088(0x0020)()
	TArray<struct FGameplayTag>                   CallFunc_BreakGameplayTagContainer_GameplayTags;   // 0x00A8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ___int_Variable_1;                                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x00C4(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x00D8(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x00F0(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x0104(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          ___bool_True_if_break_was_hit_Variable;            // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0119(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x011A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11B[0x5];                                      // 0x011B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2; // 0x0120(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_6;         // 0x0140(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0157(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_7;         // 0x015C(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x0170(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ___int_Array_Index_Variable;                       // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_Array_Get_Item;                           // 0x01A0(0x000C)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3; // 0x01B0(0x0020)()
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1; // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1; // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E1[0x7];                                      // 0x01E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2; // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2; // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F9[0x7];                                      // 0x01F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0200(0x0010)(ReferenceParm)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item_1;                         // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x7];                                      // 0x0219(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x0220(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x0230(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Zhezhi_C_攻击按下) == 0x000008, "Wrong alignment on BP_Input_Zhezhi_C_攻击按下");
static_assert(sizeof(BP_Input_Zhezhi_C_攻击按下) == 0x000238, "Wrong size on BP_Input_Zhezhi_C_攻击按下");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, time) == 0x000000, "Member 'BP_Input_Zhezhi_C_攻击按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, ReturnValue) == 0x000004, "Member 'BP_Input_Zhezhi_C_攻击按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, ___int_Loop_Counter_Variable) == 0x000018, "Member 'BP_Input_Zhezhi_C_攻击按下::___int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc______ReturnValue) == 0x00001C, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000034, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000048, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, ___int_Variable) == 0x000068, "Member 'BP_Input_Zhezhi_C_攻击按下::___int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_GetTagCount_ReturnValue) == 0x00006C, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_GetTagCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000074, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1) == 0x000088, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_BreakGameplayTagContainer_GameplayTags) == 0x0000A8, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_BreakGameplayTagContainer_GameplayTags' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, ___int_Variable_1) == 0x0000BC, "Member 'BP_Input_Zhezhi_C_攻击按下::___int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000C0, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x0000C4, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x0000D8, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x0000EC, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x0000F0, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x000104, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, ___bool_True_if_break_was_hit_Variable) == 0x000118, "Member 'BP_Input_Zhezhi_C_攻击按下::___bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_Not_PreBool_ReturnValue) == 0x000119, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_BooleanAND_ReturnValue) == 0x00011A, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2) == 0x000120, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_6) == 0x000140, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000154, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x000155, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000156, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_BooleanAND_ReturnValue_1) == 0x000157, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_BooleanOR_ReturnValue) == 0x000158, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_CreateSkillCommand_ReturnValue_7) == 0x00015C, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_CreateSkillCommand_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x000170, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x000180, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000188, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000198, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, ___int_Array_Index_Variable) == 0x00019C, "Member 'BP_Input_Zhezhi_C_攻击按下::___int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_Array_Get_Item) == 0x0001A0, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3) == 0x0001B0, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1) == 0x0001D0, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1) == 0x0001E0, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2) == 0x0001E8, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2) == 0x0001F8, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, K2Node_MakeArray_Array) == 0x000200, "Member 'BP_Input_Zhezhi_C_攻击按下::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_CanResponseInput_ReturnValue) == 0x000210, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_Array_Get_Item_1) == 0x000214, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000218, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x000220, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击按下, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x000230, "Member 'BP_Input_Zhezhi_C_攻击按下::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");

// Function BP_Input_Zhezhi.BP_Input_Zhezhi_C.技能1按下
// 0x00E0 (0x00E0 - 0x0000)
struct BP_Input_Zhezhi_C_技能1按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0030(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0050(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0064(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetSkillAcceptInput_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTagCount_ReturnValue;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetTagCount_ReturnValue_1;                // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc__________;                                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0090(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue; // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00A5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00A6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x00A7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB[0x1];                                       // 0x00AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x00AC(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc___________1;                              // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc___________2;                              // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Zhezhi_C_技能1按下) == 0x000008, "Wrong alignment on BP_Input_Zhezhi_C_技能1按下");
static_assert(sizeof(BP_Input_Zhezhi_C_技能1按下) == 0x0000E0, "Wrong size on BP_Input_Zhezhi_C_技能1按下");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, time) == 0x000000, "Member 'BP_Input_Zhezhi_C_技能1按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, ReturnValue) == 0x000004, "Member 'BP_Input_Zhezhi_C_技能1按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc___1___ReturnValue) == 0x000018, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_CanResponseInput_ReturnValue) == 0x00002C, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000030, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000050, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000064, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_GetSkillAcceptInput_ReturnValue) == 0x000078, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_GetSkillAcceptInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_GetTagCount_ReturnValue) == 0x00007C, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_GetTagCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_GetTagCount_ReturnValue_1) == 0x000080, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_GetTagCount_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_Add_IntInt_ReturnValue) == 0x000084, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_Add_IntInt_ReturnValue_1) == 0x000088, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc__________) == 0x00008C, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc__________' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000090, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue) == 0x0000A4, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_GetCommonSkillCanBeInterrupt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_BooleanOR_ReturnValue) == 0x0000A5, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000A6, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x0000A7, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000A8, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_BooleanAND_ReturnValue) == 0x0000A9, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_BooleanOR_ReturnValue_1) == 0x0000AA, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x0000AC, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc___________1) == 0x0000C0, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc___________1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc___________2) == 0x0000C1, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc___________2' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000C8, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1按下, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0000D8, "Member 'BP_Input_Zhezhi_C_技能1按下::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");

// Function BP_Input_Zhezhi.BP_Input_Zhezhi_C.攻击长按
// 0x0150 (0x0150 - 0x0000)
struct BP_Input_Zhezhi_C_攻击长按 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x0040(0x0014)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0058(0x0020)()
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_2;         // 0x0078(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_3;         // 0x008C(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAnyMatchingGameplayTags_self_CastInput; // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAnyMatchingGameplayTags_ReturnValue;   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x00B8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_4;         // 0x00CC(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_1;  // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_1;     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_5;         // 0x00F4(0x0014)(NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_2;  // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_2;     // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_3;  // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_3;     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0132(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_133[0x5];                                      // 0x0133(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput_4;  // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue_4;     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Zhezhi_C_攻击长按) == 0x000008, "Wrong alignment on BP_Input_Zhezhi_C_攻击长按");
static_assert(sizeof(BP_Input_Zhezhi_C_攻击长按) == 0x000150, "Wrong size on BP_Input_Zhezhi_C_攻击长按");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, time) == 0x000000, "Member 'BP_Input_Zhezhi_C_攻击长按::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, ReturnValue) == 0x000004, "Member 'BP_Input_Zhezhi_C_攻击长按::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc______ReturnValue) == 0x000018, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue) == 0x00002C, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x000040, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000058, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_2) == 0x000078, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_3) == 0x00008C, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_self_CastInput) == 0x0000A0, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasAnyMatchingGameplayTags_ReturnValue) == 0x0000B0, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasAnyMatchingGameplayTags_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x0000B8, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x0000C8, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_4) == 0x0000CC, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_1) == 0x0000E0, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_1) == 0x0000F0, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_CreateSkillCommand_ReturnValue_5) == 0x0000F4, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_CreateSkillCommand_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_2) == 0x000108, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_2) == 0x000118, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_3) == 0x000120, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_3) == 0x000130, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_CanResponseInput_ReturnValue) == 0x000131, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000132, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasMatchingGameplayTag_self_CastInput_4) == 0x000138, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasMatchingGameplayTag_self_CastInput_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_HasMatchingGameplayTag_ReturnValue_4) == 0x000148, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_HasMatchingGameplayTag_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000149, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_IsMovingOnGround_ReturnValue) == 0x00014A, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_BooleanAND_ReturnValue) == 0x00014B, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_攻击长按, CallFunc_BooleanOR_ReturnValue) == 0x00014C, "Member 'BP_Input_Zhezhi_C_攻击长按::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Input_Zhezhi.BP_Input_Zhezhi_C.技能1长按
// 0x0088 (0x0088 - 0x0000)
struct BP_Input_Zhezhi_C_技能1长按 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSInputCommand                         CallFunc___1___ReturnValue;                        // 0x001C(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FGameplayTagContainer                  CallFunc_MakeLiteralGameplayTagContainer_ReturnValue; // 0x0030(0x0020)()
	struct FSInputCommand                         K2Node_MakeStruct_SInputCommand;                   // 0x0050(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasAllMatchingGameplayTags_self_CastInput; // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasAllMatchingGameplayTags_ReturnValue;   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Zhezhi_C_技能1长按) == 0x000008, "Wrong alignment on BP_Input_Zhezhi_C_技能1长按");
static_assert(sizeof(BP_Input_Zhezhi_C_技能1长按) == 0x000088, "Wrong size on BP_Input_Zhezhi_C_技能1长按");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, time) == 0x000000, "Member 'BP_Input_Zhezhi_C_技能1长按::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, ReturnValue) == 0x000004, "Member 'BP_Input_Zhezhi_C_技能1长按::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_Input_Zhezhi_C_技能1长按::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, CallFunc___1___ReturnValue) == 0x00001C, "Member 'BP_Input_Zhezhi_C_技能1长按::CallFunc___1___ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, CallFunc_MakeLiteralGameplayTagContainer_ReturnValue) == 0x000030, "Member 'BP_Input_Zhezhi_C_技能1长按::CallFunc_MakeLiteralGameplayTagContainer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, K2Node_MakeStruct_SInputCommand) == 0x000050, "Member 'BP_Input_Zhezhi_C_技能1长按::K2Node_MakeStruct_SInputCommand' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000064, "Member 'BP_Input_Zhezhi_C_技能1长按::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, CallFunc_CanResponseInput_ReturnValue) == 0x000065, "Member 'BP_Input_Zhezhi_C_技能1长按::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000066, "Member 'BP_Input_Zhezhi_C_技能1长按::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, CallFunc_IsMovingOnGround_ReturnValue) == 0x000067, "Member 'BP_Input_Zhezhi_C_技能1长按::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, CallFunc_BooleanAND_ReturnValue) == 0x000068, "Member 'BP_Input_Zhezhi_C_技能1长按::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, CallFunc_BooleanOR_ReturnValue) == 0x000069, "Member 'BP_Input_Zhezhi_C_技能1长按::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, CallFunc_HasAllMatchingGameplayTags_self_CastInput) == 0x000070, "Member 'BP_Input_Zhezhi_C_技能1长按::CallFunc_HasAllMatchingGameplayTags_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1长按, CallFunc_HasAllMatchingGameplayTags_ReturnValue) == 0x000080, "Member 'BP_Input_Zhezhi_C_技能1长按::CallFunc_HasAllMatchingGameplayTags_ReturnValue' has a wrong offset!");

// Function BP_Input_Zhezhi.BP_Input_Zhezhi_C.飞鹤存在检测
// 0x000C (0x000C - 0x0000)
struct BP_Input_Zhezhi_C_飞鹤存在检测 final
{
public:
	bool                                          存在;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc______Int__;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEntityEnable_ReturnValue;              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Zhezhi_C_飞鹤存在检测) == 0x000004, "Wrong alignment on BP_Input_Zhezhi_C_飞鹤存在检测");
static_assert(sizeof(BP_Input_Zhezhi_C_飞鹤存在检测) == 0x00000C, "Wrong size on BP_Input_Zhezhi_C_飞鹤存在检测");
static_assert(offsetof(BP_Input_Zhezhi_C_飞鹤存在检测, 存在) == 0x000000, "Member 'BP_Input_Zhezhi_C_飞鹤存在检测::存在' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_飞鹤存在检测, CallFunc______Int__) == 0x000004, "Member 'BP_Input_Zhezhi_C_飞鹤存在检测::CallFunc______Int__' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_飞鹤存在检测, CallFunc_GetEntityEnable_ReturnValue) == 0x000008, "Member 'BP_Input_Zhezhi_C_飞鹤存在检测::CallFunc_GetEntityEnable_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_飞鹤存在检测, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000009, "Member 'BP_Input_Zhezhi_C_飞鹤存在检测::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Input_Zhezhi.BP_Input_Zhezhi_C.大招按下
// 0x0068 (0x0068 - 0x0000)
struct BP_Input_Zhezhi_C_大招按下 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue;           // 0x0018(0x0014)(NoDestructor, HasGetValueTypeHash)
	struct FSInputCommand                         CallFunc_CreateSkillCommand_ReturnValue_1;         // 0x002C(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanResponseInput_ReturnValue;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue;     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetAttributeCurrentValue_ReturnValue_1;   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsMovingOnGround_ReturnValue;             // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FSInputCommand                         CallFunc______ReturnValue;                         // 0x0050(0x0014)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Zhezhi_C_大招按下) == 0x000004, "Wrong alignment on BP_Input_Zhezhi_C_大招按下");
static_assert(sizeof(BP_Input_Zhezhi_C_大招按下) == 0x000068, "Wrong size on BP_Input_Zhezhi_C_大招按下");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, time) == 0x000000, "Member 'BP_Input_Zhezhi_C_大招按下::time' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, ReturnValue) == 0x000004, "Member 'BP_Input_Zhezhi_C_大招按下::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue) == 0x000018, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc_CreateSkillCommand_ReturnValue_1) == 0x00002C, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc_CreateSkillCommand_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc_CanResponseInput_ReturnValue) == 0x000040, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc_CanResponseInput_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue) == 0x000044, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc_GetAttributeCurrentValue_ReturnValue_1) == 0x000048, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc_GetAttributeCurrentValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x00004C, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00004D, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc_IsMovingOnGround_ReturnValue) == 0x00004E, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc_IsMovingOnGround_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00004F, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc______ReturnValue) == 0x000050, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc______ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc_BooleanAND_ReturnValue) == 0x000064, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_大招按下, CallFunc_BooleanOR_ReturnValue) == 0x000065, "Member 'BP_Input_Zhezhi_C_大招按下::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Input_Zhezhi.BP_Input_Zhezhi_C.飞鹤在空中
// 0x0038 (0x0038 - 0x0000)
struct BP_Input_Zhezhi_C_飞鹤在空中 final
{
public:
	bool                                          在空中;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc______Int__;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetActorByEntityId_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IGameplayTagAssetInterface> CallFunc_HasMatchingGameplayTag_self_CastInput;    // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasMatchingGameplayTag_ReturnValue;       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Input_Zhezhi_C_飞鹤在空中) == 0x000008, "Wrong alignment on BP_Input_Zhezhi_C_飞鹤在空中");
static_assert(sizeof(BP_Input_Zhezhi_C_飞鹤在空中) == 0x000038, "Wrong size on BP_Input_Zhezhi_C_飞鹤在空中");
static_assert(offsetof(BP_Input_Zhezhi_C_飞鹤在空中, 在空中) == 0x000000, "Member 'BP_Input_Zhezhi_C_飞鹤在空中::在空中' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_飞鹤在空中, CallFunc______Int__) == 0x000004, "Member 'BP_Input_Zhezhi_C_飞鹤在空中::CallFunc______Int__' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_飞鹤在空中, CallFunc_GetActorByEntityId_ReturnValue) == 0x000008, "Member 'BP_Input_Zhezhi_C_飞鹤在空中::CallFunc_GetActorByEntityId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_飞鹤在空中, K2Node_DynamicCast_AsTs_Base_Character) == 0x000010, "Member 'BP_Input_Zhezhi_C_飞鹤在空中::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_飞鹤在空中, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Input_Zhezhi_C_飞鹤在空中::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_飞鹤在空中, CallFunc_HasMatchingGameplayTag_self_CastInput) == 0x000020, "Member 'BP_Input_Zhezhi_C_飞鹤在空中::CallFunc_HasMatchingGameplayTag_self_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Input_Zhezhi_C_飞鹤在空中, CallFunc_HasMatchingGameplayTag_ReturnValue) == 0x000030, "Member 'BP_Input_Zhezhi_C_飞鹤在空中::CallFunc_HasMatchingGameplayTag_ReturnValue' has a wrong offset!");

// Function BP_Input_Zhezhi.BP_Input_Zhezhi_C.技能1抬起事件
// 0x0004 (0x0004 - 0x0000)
struct BP_Input_Zhezhi_C_技能1抬起事件 final
{
public:
	float                                         time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Input_Zhezhi_C_技能1抬起事件) == 0x000004, "Wrong alignment on BP_Input_Zhezhi_C_技能1抬起事件");
static_assert(sizeof(BP_Input_Zhezhi_C_技能1抬起事件) == 0x000004, "Wrong size on BP_Input_Zhezhi_C_技能1抬起事件");
static_assert(offsetof(BP_Input_Zhezhi_C_技能1抬起事件, time) == 0x000000, "Member 'BP_Input_Zhezhi_C_技能1抬起事件::time' has a wrong offset!");

}

