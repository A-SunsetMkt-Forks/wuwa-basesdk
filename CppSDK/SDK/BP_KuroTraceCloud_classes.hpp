#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroTraceCloud

#include "Basic.hpp"

#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SD_KuroTraceCloudData_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_KuroTraceCloud.BP_KuroTraceCloud_C
// 0x0178 (0x0428 - 0x02B0)
class ABP_KuroTraceCloud_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBPC_VolumeCloudTrail_C*                BPC_VolumeCloudTrail;                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FadeRoot;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CloudRange;                                        // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         CloudLerp;                                         // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LerpSpeed;                                         // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSD_KuroTraceCloudData>         Data;                                              // 0x02E8(0x0010)(Edit, BlueprintVisible)
	struct FSD_KuroTraceCloudData                 LerpData;                                          // 0x02F8(0x0014)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEditorTick;                                       // 0x030C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceConstant*              HighCloudMaterial;                                 // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeHeightPercentage;                              // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bDrawFadeBox;                                      // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceConstant*              PlaneMaterial;                                     // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 boundActor;                                        // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AStaticMeshActor*                       bottomPlane;                                       // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LocalLightPos;                                     // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LocalLightPos2;                                    // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LocalLightPos3;                                    // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LocalLightColor;                                   // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LocalLightColor2;                                  // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LocalLightColor3;                                  // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TempLightColor;                                    // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TempLightColor2;                                   // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TempLightColor3;                                   // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightAttenuationC1;                                // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightAttenuationC2;                                // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bLighting;                                         // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 lightPosProxy;                                     // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 lightPosProxy2;                                    // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 lightPosProxy3;                                    // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceConstant*              HighCloudMaterial_Lighting;                        // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RadialMaskPos;                                     // 0x03F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RadialMaskRadius;                                  // 0x0404(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FadeBox;                                           // 0x0408(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBP_EWorldType                                NewVar_0;                                          // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBP_EWorldType                                Editor_Type_0;                                     // 0x0415(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_416[0x2];                                      // 0x0416(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Dist;                                              // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeWidth;                                         // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinAlpha;                                          // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_KuroTraceCloud(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void EditorTick();
	void UserConstructionScript();
	void UpdateCloudTransform(const class UStaticMeshComponent* CloudCube);
	void UpdateCloudLighting(class UMaterialInstanceDynamic* Material);
	void GetLerpGIData(float Time, struct FSD_KuroTraceCloudData* LerpData_0);
	void Update_Cloud_Fade();
	void ShowCloud(bool bNewVisibility);
	void DistanceFromBox(const struct FVector& P, const struct FVector& Box, float* dist);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_KuroTraceCloud_C">();
	}
	static class ABP_KuroTraceCloud_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_KuroTraceCloud_C>();
	}
};
static_assert(alignof(ABP_KuroTraceCloud_C) == 0x000008, "Wrong alignment on ABP_KuroTraceCloud_C");
static_assert(sizeof(ABP_KuroTraceCloud_C) == 0x000428, "Wrong size on ABP_KuroTraceCloud_C");
static_assert(offsetof(ABP_KuroTraceCloud_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_KuroTraceCloud_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, BPC_VolumeCloudTrail) == 0x0002B8, "Member 'ABP_KuroTraceCloud_C::BPC_VolumeCloudTrail' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, FadeRoot) == 0x0002C0, "Member 'ABP_KuroTraceCloud_C::FadeRoot' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, Cube) == 0x0002C8, "Member 'ABP_KuroTraceCloud_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, CloudRange) == 0x0002D0, "Member 'ABP_KuroTraceCloud_C::CloudRange' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, DefaultSceneRoot) == 0x0002D8, "Member 'ABP_KuroTraceCloud_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, CloudLerp) == 0x0002E0, "Member 'ABP_KuroTraceCloud_C::CloudLerp' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, LerpSpeed) == 0x0002E4, "Member 'ABP_KuroTraceCloud_C::LerpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, Data) == 0x0002E8, "Member 'ABP_KuroTraceCloud_C::Data' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, LerpData) == 0x0002F8, "Member 'ABP_KuroTraceCloud_C::LerpData' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, bEditorTick) == 0x00030C, "Member 'ABP_KuroTraceCloud_C::bEditorTick' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, HighCloudMaterial) == 0x000310, "Member 'ABP_KuroTraceCloud_C::HighCloudMaterial' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, FadeHeightPercentage) == 0x000318, "Member 'ABP_KuroTraceCloud_C::FadeHeightPercentage' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, bDrawFadeBox) == 0x00031C, "Member 'ABP_KuroTraceCloud_C::bDrawFadeBox' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, PlaneMaterial) == 0x000320, "Member 'ABP_KuroTraceCloud_C::PlaneMaterial' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, boundActor) == 0x000328, "Member 'ABP_KuroTraceCloud_C::boundActor' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, bottomPlane) == 0x000330, "Member 'ABP_KuroTraceCloud_C::bottomPlane' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, LocalLightPos) == 0x000338, "Member 'ABP_KuroTraceCloud_C::LocalLightPos' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, LocalLightPos2) == 0x000348, "Member 'ABP_KuroTraceCloud_C::LocalLightPos2' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, LocalLightPos3) == 0x000358, "Member 'ABP_KuroTraceCloud_C::LocalLightPos3' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, LocalLightColor) == 0x000368, "Member 'ABP_KuroTraceCloud_C::LocalLightColor' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, LocalLightColor2) == 0x000378, "Member 'ABP_KuroTraceCloud_C::LocalLightColor2' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, LocalLightColor3) == 0x000388, "Member 'ABP_KuroTraceCloud_C::LocalLightColor3' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, TempLightColor) == 0x000398, "Member 'ABP_KuroTraceCloud_C::TempLightColor' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, TempLightColor2) == 0x0003A8, "Member 'ABP_KuroTraceCloud_C::TempLightColor2' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, TempLightColor3) == 0x0003B8, "Member 'ABP_KuroTraceCloud_C::TempLightColor3' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, LightAttenuationC1) == 0x0003C8, "Member 'ABP_KuroTraceCloud_C::LightAttenuationC1' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, LightAttenuationC2) == 0x0003CC, "Member 'ABP_KuroTraceCloud_C::LightAttenuationC2' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, bLighting) == 0x0003D0, "Member 'ABP_KuroTraceCloud_C::bLighting' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, lightPosProxy) == 0x0003D8, "Member 'ABP_KuroTraceCloud_C::lightPosProxy' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, lightPosProxy2) == 0x0003E0, "Member 'ABP_KuroTraceCloud_C::lightPosProxy2' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, lightPosProxy3) == 0x0003E8, "Member 'ABP_KuroTraceCloud_C::lightPosProxy3' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, HighCloudMaterial_Lighting) == 0x0003F0, "Member 'ABP_KuroTraceCloud_C::HighCloudMaterial_Lighting' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, RadialMaskPos) == 0x0003F8, "Member 'ABP_KuroTraceCloud_C::RadialMaskPos' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, RadialMaskRadius) == 0x000404, "Member 'ABP_KuroTraceCloud_C::RadialMaskRadius' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, FadeBox) == 0x000408, "Member 'ABP_KuroTraceCloud_C::FadeBox' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, NewVar_0) == 0x000414, "Member 'ABP_KuroTraceCloud_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, Editor_Type_0) == 0x000415, "Member 'ABP_KuroTraceCloud_C::Editor_Type_0' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, Dist) == 0x000418, "Member 'ABP_KuroTraceCloud_C::Dist' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, FadeWidth) == 0x00041C, "Member 'ABP_KuroTraceCloud_C::FadeWidth' has a wrong offset!");
static_assert(offsetof(ABP_KuroTraceCloud_C, MinAlpha) == 0x000420, "Member 'ABP_KuroTraceCloud_C::MinAlpha' has a wrong offset!");

}

