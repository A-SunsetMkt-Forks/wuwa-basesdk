#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SceneLensflare

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_SceneLensflare.BP_SceneLensflare_C.ExecuteUbergraph_BP_SceneLensflare
// 0x0058 (0x0058 - 0x0000)
struct BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue;             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_Event_DynMaterial;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_Event_DynMaterial_1;                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               K2Node_Event_DynMaterial_2;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_BoolToFloat_ReturnValue_1;           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare) == 0x000008, "Wrong alignment on BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare");
static_assert(sizeof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare) == 0x000058, "Wrong size on BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, EntryPoint) == 0x000000, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, CallFunc_Conv_BoolToFloat_ReturnValue) == 0x000004, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::CallFunc_Conv_BoolToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, CallFunc_BreakVector2D_X) == 0x000008, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, CallFunc_BreakVector2D_Y) == 0x00000C, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, K2Node_MakeStruct_LinearColor) == 0x000010, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, CallFunc_FClamp_ReturnValue_1) == 0x000024, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00002C, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, CallFunc_FClamp_ReturnValue_2) == 0x000030, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000034, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, K2Node_Event_DynMaterial) == 0x000038, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::K2Node_Event_DynMaterial' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, K2Node_Event_DynMaterial_1) == 0x000040, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::K2Node_Event_DynMaterial_1' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, K2Node_Event_DynMaterial_2) == 0x000048, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::K2Node_Event_DynMaterial_2' has a wrong offset!");
static_assert(offsetof(BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare, CallFunc_Conv_BoolToFloat_ReturnValue_1) == 0x000050, "Member 'BP_SceneLensflare_C_ExecuteUbergraph_BP_SceneLensflare::CallFunc_Conv_BoolToFloat_ReturnValue_1' has a wrong offset!");

// Function BP_SceneLensflare.BP_SceneLensflare_C.ApplyDynamicMaterialGlare
// 0x0008 (0x0008 - 0x0000)
struct BP_SceneLensflare_C_ApplyDynamicMaterialGlare final
{
public:
	class UMaterialInstanceDynamic*               DynMaterial;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SceneLensflare_C_ApplyDynamicMaterialGlare) == 0x000008, "Wrong alignment on BP_SceneLensflare_C_ApplyDynamicMaterialGlare");
static_assert(sizeof(BP_SceneLensflare_C_ApplyDynamicMaterialGlare) == 0x000008, "Wrong size on BP_SceneLensflare_C_ApplyDynamicMaterialGlare");
static_assert(offsetof(BP_SceneLensflare_C_ApplyDynamicMaterialGlare, DynMaterial) == 0x000000, "Member 'BP_SceneLensflare_C_ApplyDynamicMaterialGlare::DynMaterial' has a wrong offset!");

// Function BP_SceneLensflare.BP_SceneLensflare_C.ApplyDynamicMaterialHalo
// 0x0008 (0x0008 - 0x0000)
struct BP_SceneLensflare_C_ApplyDynamicMaterialHalo final
{
public:
	class UMaterialInstanceDynamic*               DynMaterial;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SceneLensflare_C_ApplyDynamicMaterialHalo) == 0x000008, "Wrong alignment on BP_SceneLensflare_C_ApplyDynamicMaterialHalo");
static_assert(sizeof(BP_SceneLensflare_C_ApplyDynamicMaterialHalo) == 0x000008, "Wrong size on BP_SceneLensflare_C_ApplyDynamicMaterialHalo");
static_assert(offsetof(BP_SceneLensflare_C_ApplyDynamicMaterialHalo, DynMaterial) == 0x000000, "Member 'BP_SceneLensflare_C_ApplyDynamicMaterialHalo::DynMaterial' has a wrong offset!");

// Function BP_SceneLensflare.BP_SceneLensflare_C.ApplyDynamicMaterialGhost
// 0x0008 (0x0008 - 0x0000)
struct BP_SceneLensflare_C_ApplyDynamicMaterialGhost final
{
public:
	class UMaterialInstanceDynamic*               DynMaterial;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_SceneLensflare_C_ApplyDynamicMaterialGhost) == 0x000008, "Wrong alignment on BP_SceneLensflare_C_ApplyDynamicMaterialGhost");
static_assert(sizeof(BP_SceneLensflare_C_ApplyDynamicMaterialGhost) == 0x000008, "Wrong size on BP_SceneLensflare_C_ApplyDynamicMaterialGhost");
static_assert(offsetof(BP_SceneLensflare_C_ApplyDynamicMaterialGhost, DynMaterial) == 0x000000, "Member 'BP_SceneLensflare_C_ApplyDynamicMaterialGhost::DynMaterial' has a wrong offset!");

}

