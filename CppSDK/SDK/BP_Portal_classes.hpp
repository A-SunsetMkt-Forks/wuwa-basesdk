#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Portal

#include "Basic.hpp"

#include "KuroRenderingRuntimeBPPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Portal.BP_Portal_C
// 0x0220 (0x04D0 - 0x02B0)
class ABP_Portal_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneCaptureComponent2D*               CapturePosition1;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneCaptureComponent2D*               CapturePosition2;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             PortalWorldTransform1;                             // 0x02D0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             PortalWorldTransform2;                             // 0x0300(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	class UMaterialInstanceDynamic*               DMI_Portal1;                                       // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_Portal2;                                       // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PortalColor1;                                      // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PortalColor2;                                      // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DebugActor1;                                       // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 DebugActor2;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Portal1Enable;                                     // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Portal2Enable;                                     // 0x0371(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_372[0x6];                                      // 0x0372(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RT2;                                               // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimShowLen_Portal1;                               // 0x0380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimFadeLen_Portal1;                               // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimIsShowing_Portal1;                             // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AnimShowCurve_Portal1;                             // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AnimFadeCurve_Portal1;                             // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimCounter_Portal1;                               // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimShowLen_Portal2;                               // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimFadeLen_Portal2;                               // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnimIsShowing_Portal2;                             // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AD[0x3];                                      // 0x03AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AnimShowCurve_Portal2;                             // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            AnimFadeCurve_Portal2;                             // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimCounter_Portal2;                               // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RT1;                                               // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        EffectData_1;                                      // 0x03D0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FSoftObjectPath                        EffectData_2;                                      // 0x03F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	struct FVector                                PortalBounds1;                                     // 0x0410(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDebugCamera1;                                // 0x041C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableDebugCamera2;                                // 0x041D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41E[0x2];                                      // 0x041E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PortalBounds2;                                     // 0x0420(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSceneCaptureComponent2DParams         CaptureConfig_Mobile_VeryLow;                      // 0x042C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSceneCaptureComponent2DParams         CaptureConfig_Mobile_Low;                          // 0x043C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSceneCaptureComponent2DParams         CaptureConfig_Mobile_Mid;                          // 0x044C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSceneCaptureComponent2DParams         CaptureConfig_Mobile_High;                         // 0x045C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSceneCaptureComponent2DParams         CaptureConfig_Pc_VeryLow;                          // 0x046C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSceneCaptureComponent2DParams         CaptureConfig_Pc_Low;                              // 0x047C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSceneCaptureComponent2DParams         CaptureConfig_Pc_Mid;                              // 0x048C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSceneCaptureComponent2DParams         CaptureConfig_Pc_High;                             // 0x049C(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          IsMobile;                                          // 0x04AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PerformanceLevel_A;                                // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PerformanceLevel_B;                                // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureMaxViewDistance_A;                          // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CaptureMaxViewDistance_B;                          // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDebugCapture1Params;                         // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          EnableDebugCapture2Params;                         // 0x04C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C2[0x2];                                      // 0x04C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapturePerf_Lv0_MaxDist;                           // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapturePerf_Lv1_MaxDist;                           // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CapturePerf_Lv2_MaxDist;                           // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Portal(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void One();
	void SetPortal1Bounds(const struct FVector& Bounds);
	void SetPortal2Bounds(const struct FVector& Bounds);
	void SetPortal1Transform(const struct FTransform& Transform, const struct FTransform& CaptureTransform);
	void SetPortal2Transform(const struct FTransform& Transform, const struct FTransform& CaptureTransform);
	void EnablePortal1Rendering();
	void DisablePortal1Rendering();
	void EnablePortal2Rendering();
	void DisablePortal2Rendering();
	void Two();
	void DEBUG_s_1();
	void DEBUG_s_2();
	void SetCaptureShowingActors(bool IsCapture1, TArray<class AActor*>& HiddenActors, TArray<class AActor*>& ForceShowActors);
	void SetCaptureMaxViewDistance(bool IsCapture1, float MaxViewDistance);
	void SetCaptureShowFlags(bool IsCapture1, const TMap<class FString, bool>& ShowFlags);
	void UpdatePortalAnimation(float ShowLen, float FadeLen, bool IsShown, class UCurveFloat* ShowCurve, class UCurveFloat* FadeCurve, float Counter, class UStaticMeshComponent* SM, class UStaticMeshComponent* DMI, float* OutputCounter, float* Factor);
	void UpdatePortalsCameraPosition();
	void GetMappingTransformToOtherPortal(const struct FTransform& SourceTransform, bool bA2B, struct FTransform* TargetTransform);
	void DrawDebugFrustum(const struct FTransform& Transform, float FovX, float NearClipPlane, float AspectRatio);
	void GetAngleBetweenVector(const struct FVector& Vector1, const struct FVector& Vector2, float* Angle);
	void ApplyCapturePerformace(bool IsPortalA, int32 ConfigLevel, float CaptureMaxViewDistance);
	void CheckCapturePerformanceLevel(bool IsPortalA, const struct FTransform& TargetTrans);
	void PrintDebugCaptureParams(bool IsCapture1, const struct FSceneCaptureComponent2DParams& CaptureParam);
	void DrawDebugPortalBounds(bool IsPortal1);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Portal_C">();
	}
	static class ABP_Portal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Portal_C>();
	}
};
static_assert(alignof(ABP_Portal_C) == 0x000010, "Wrong alignment on ABP_Portal_C");
static_assert(sizeof(ABP_Portal_C) == 0x0004D0, "Wrong size on ABP_Portal_C");
static_assert(offsetof(ABP_Portal_C, UberGraphFrame) == 0x0002B0, "Member 'ABP_Portal_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CapturePosition1) == 0x0002B8, "Member 'ABP_Portal_C::CapturePosition1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CapturePosition2) == 0x0002C0, "Member 'ABP_Portal_C::CapturePosition2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, DefaultSceneRoot) == 0x0002C8, "Member 'ABP_Portal_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalWorldTransform1) == 0x0002D0, "Member 'ABP_Portal_C::PortalWorldTransform1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalWorldTransform2) == 0x000300, "Member 'ABP_Portal_C::PortalWorldTransform2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, DMI_Portal1) == 0x000330, "Member 'ABP_Portal_C::DMI_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, DMI_Portal2) == 0x000338, "Member 'ABP_Portal_C::DMI_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalColor1) == 0x000340, "Member 'ABP_Portal_C::PortalColor1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalColor2) == 0x000350, "Member 'ABP_Portal_C::PortalColor2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, DebugActor1) == 0x000360, "Member 'ABP_Portal_C::DebugActor1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, DebugActor2) == 0x000368, "Member 'ABP_Portal_C::DebugActor2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, Portal1Enable) == 0x000370, "Member 'ABP_Portal_C::Portal1Enable' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, Portal2Enable) == 0x000371, "Member 'ABP_Portal_C::Portal2Enable' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, RT2) == 0x000378, "Member 'ABP_Portal_C::RT2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimShowLen_Portal1) == 0x000380, "Member 'ABP_Portal_C::AnimShowLen_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimFadeLen_Portal1) == 0x000384, "Member 'ABP_Portal_C::AnimFadeLen_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimIsShowing_Portal1) == 0x000388, "Member 'ABP_Portal_C::AnimIsShowing_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimShowCurve_Portal1) == 0x000390, "Member 'ABP_Portal_C::AnimShowCurve_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimFadeCurve_Portal1) == 0x000398, "Member 'ABP_Portal_C::AnimFadeCurve_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimCounter_Portal1) == 0x0003A0, "Member 'ABP_Portal_C::AnimCounter_Portal1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimShowLen_Portal2) == 0x0003A4, "Member 'ABP_Portal_C::AnimShowLen_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimFadeLen_Portal2) == 0x0003A8, "Member 'ABP_Portal_C::AnimFadeLen_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimIsShowing_Portal2) == 0x0003AC, "Member 'ABP_Portal_C::AnimIsShowing_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimShowCurve_Portal2) == 0x0003B0, "Member 'ABP_Portal_C::AnimShowCurve_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimFadeCurve_Portal2) == 0x0003B8, "Member 'ABP_Portal_C::AnimFadeCurve_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, AnimCounter_Portal2) == 0x0003C0, "Member 'ABP_Portal_C::AnimCounter_Portal2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, RT1) == 0x0003C8, "Member 'ABP_Portal_C::RT1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, EffectData_1) == 0x0003D0, "Member 'ABP_Portal_C::EffectData_1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, EffectData_2) == 0x0003F0, "Member 'ABP_Portal_C::EffectData_2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalBounds1) == 0x000410, "Member 'ABP_Portal_C::PortalBounds1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, EnableDebugCamera1) == 0x00041C, "Member 'ABP_Portal_C::EnableDebugCamera1' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, EnableDebugCamera2) == 0x00041D, "Member 'ABP_Portal_C::EnableDebugCamera2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PortalBounds2) == 0x000420, "Member 'ABP_Portal_C::PortalBounds2' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CaptureConfig_Mobile_VeryLow) == 0x00042C, "Member 'ABP_Portal_C::CaptureConfig_Mobile_VeryLow' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CaptureConfig_Mobile_Low) == 0x00043C, "Member 'ABP_Portal_C::CaptureConfig_Mobile_Low' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CaptureConfig_Mobile_Mid) == 0x00044C, "Member 'ABP_Portal_C::CaptureConfig_Mobile_Mid' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CaptureConfig_Mobile_High) == 0x00045C, "Member 'ABP_Portal_C::CaptureConfig_Mobile_High' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CaptureConfig_Pc_VeryLow) == 0x00046C, "Member 'ABP_Portal_C::CaptureConfig_Pc_VeryLow' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CaptureConfig_Pc_Low) == 0x00047C, "Member 'ABP_Portal_C::CaptureConfig_Pc_Low' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CaptureConfig_Pc_Mid) == 0x00048C, "Member 'ABP_Portal_C::CaptureConfig_Pc_Mid' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CaptureConfig_Pc_High) == 0x00049C, "Member 'ABP_Portal_C::CaptureConfig_Pc_High' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, IsMobile) == 0x0004AC, "Member 'ABP_Portal_C::IsMobile' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PerformanceLevel_A) == 0x0004B0, "Member 'ABP_Portal_C::PerformanceLevel_A' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, PerformanceLevel_B) == 0x0004B4, "Member 'ABP_Portal_C::PerformanceLevel_B' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CaptureMaxViewDistance_A) == 0x0004B8, "Member 'ABP_Portal_C::CaptureMaxViewDistance_A' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CaptureMaxViewDistance_B) == 0x0004BC, "Member 'ABP_Portal_C::CaptureMaxViewDistance_B' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, EnableDebugCapture1Params) == 0x0004C0, "Member 'ABP_Portal_C::EnableDebugCapture1Params' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, EnableDebugCapture2Params) == 0x0004C1, "Member 'ABP_Portal_C::EnableDebugCapture2Params' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CapturePerf_Lv0_MaxDist) == 0x0004C4, "Member 'ABP_Portal_C::CapturePerf_Lv0_MaxDist' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CapturePerf_Lv1_MaxDist) == 0x0004C8, "Member 'ABP_Portal_C::CapturePerf_Lv1_MaxDist' has a wrong offset!");
static_assert(offsetof(ABP_Portal_C, CapturePerf_Lv2_MaxDist) == 0x0004CC, "Member 'ABP_Portal_C::CapturePerf_Lv2_MaxDist' has a wrong offset!");

}

