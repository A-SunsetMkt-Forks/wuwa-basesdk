#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KuroVehicle

#include "Basic.hpp"

#include "KuroVehicle_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function KuroVehicle.KuroBaseVehicle.K2_OnVehicleMovementModeChanged
// 0x0004 (0x0004 - 0x0000)
struct KuroBaseVehicle_K2_OnVehicleMovementModeChanged final
{
public:
	EKuroVehicleMovementMode                      PrevMovementMode;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKuroVehicleMovementMode                      NewMovementMode;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrevCustomMode;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewCustomMode;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroBaseVehicle_K2_OnVehicleMovementModeChanged) == 0x000001, "Wrong alignment on KuroBaseVehicle_K2_OnVehicleMovementModeChanged");
static_assert(sizeof(KuroBaseVehicle_K2_OnVehicleMovementModeChanged) == 0x000004, "Wrong size on KuroBaseVehicle_K2_OnVehicleMovementModeChanged");
static_assert(offsetof(KuroBaseVehicle_K2_OnVehicleMovementModeChanged, PrevMovementMode) == 0x000000, "Member 'KuroBaseVehicle_K2_OnVehicleMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(KuroBaseVehicle_K2_OnVehicleMovementModeChanged, NewMovementMode) == 0x000001, "Member 'KuroBaseVehicle_K2_OnVehicleMovementModeChanged::NewMovementMode' has a wrong offset!");
static_assert(offsetof(KuroBaseVehicle_K2_OnVehicleMovementModeChanged, PrevCustomMode) == 0x000002, "Member 'KuroBaseVehicle_K2_OnVehicleMovementModeChanged::PrevCustomMode' has a wrong offset!");
static_assert(offsetof(KuroBaseVehicle_K2_OnVehicleMovementModeChanged, NewCustomMode) == 0x000003, "Member 'KuroBaseVehicle_K2_OnVehicleMovementModeChanged::NewCustomMode' has a wrong offset!");

// Function KuroVehicle.KuroBaseVehicle.K2_UpdateVehicleCustomMovement
// 0x0004 (0x0004 - 0x0000)
struct KuroBaseVehicle_K2_UpdateVehicleCustomMovement final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroBaseVehicle_K2_UpdateVehicleCustomMovement) == 0x000004, "Wrong alignment on KuroBaseVehicle_K2_UpdateVehicleCustomMovement");
static_assert(sizeof(KuroBaseVehicle_K2_UpdateVehicleCustomMovement) == 0x000004, "Wrong size on KuroBaseVehicle_K2_UpdateVehicleCustomMovement");
static_assert(offsetof(KuroBaseVehicle_K2_UpdateVehicleCustomMovement, DeltaTime) == 0x000000, "Member 'KuroBaseVehicle_K2_UpdateVehicleCustomMovement::DeltaTime' has a wrong offset!");

// Function KuroVehicle.KuroVehicleMovementComponent.HandlePassiveVehicleImpact
// 0x00B8 (0x00B8 - 0x0000)
struct KuroVehicleMovementComponent_HandlePassiveVehicleImpact final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0094)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroVehicleMovementComponent_HandlePassiveVehicleImpact) == 0x000008, "Wrong alignment on KuroVehicleMovementComponent_HandlePassiveVehicleImpact");
static_assert(sizeof(KuroVehicleMovementComponent_HandlePassiveVehicleImpact) == 0x0000B8, "Wrong size on KuroVehicleMovementComponent_HandlePassiveVehicleImpact");
static_assert(offsetof(KuroVehicleMovementComponent_HandlePassiveVehicleImpact, HitComponent) == 0x000000, "Member 'KuroVehicleMovementComponent_HandlePassiveVehicleImpact::HitComponent' has a wrong offset!");
static_assert(offsetof(KuroVehicleMovementComponent_HandlePassiveVehicleImpact, OtherActor) == 0x000008, "Member 'KuroVehicleMovementComponent_HandlePassiveVehicleImpact::OtherActor' has a wrong offset!");
static_assert(offsetof(KuroVehicleMovementComponent_HandlePassiveVehicleImpact, OtherComp) == 0x000010, "Member 'KuroVehicleMovementComponent_HandlePassiveVehicleImpact::OtherComp' has a wrong offset!");
static_assert(offsetof(KuroVehicleMovementComponent_HandlePassiveVehicleImpact, NormalImpulse) == 0x000018, "Member 'KuroVehicleMovementComponent_HandlePassiveVehicleImpact::NormalImpulse' has a wrong offset!");
static_assert(offsetof(KuroVehicleMovementComponent_HandlePassiveVehicleImpact, Hit) == 0x000024, "Member 'KuroVehicleMovementComponent_HandlePassiveVehicleImpact::Hit' has a wrong offset!");

// Function KuroVehicle.KuroVehicleMovementComponent.Kuro_SetGravityDirect
// 0x000C (0x000C - 0x0000)
struct KuroVehicleMovementComponent_Kuro_SetGravityDirect final
{
public:
	struct FVector                                InGravityDirect;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroVehicleMovementComponent_Kuro_SetGravityDirect) == 0x000004, "Wrong alignment on KuroVehicleMovementComponent_Kuro_SetGravityDirect");
static_assert(sizeof(KuroVehicleMovementComponent_Kuro_SetGravityDirect) == 0x00000C, "Wrong size on KuroVehicleMovementComponent_Kuro_SetGravityDirect");
static_assert(offsetof(KuroVehicleMovementComponent_Kuro_SetGravityDirect, InGravityDirect) == 0x000000, "Member 'KuroVehicleMovementComponent_Kuro_SetGravityDirect::InGravityDirect' has a wrong offset!");

// Function KuroVehicle.KuroVehicleMovementComponent.SetMovementMode
// 0x0002 (0x0002 - 0x0000)
struct KuroVehicleMovementComponent_SetMovementMode final
{
public:
	EKuroVehicleMovementMode                      NewMovementMode;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewCustomMode;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroVehicleMovementComponent_SetMovementMode) == 0x000001, "Wrong alignment on KuroVehicleMovementComponent_SetMovementMode");
static_assert(sizeof(KuroVehicleMovementComponent_SetMovementMode) == 0x000002, "Wrong size on KuroVehicleMovementComponent_SetMovementMode");
static_assert(offsetof(KuroVehicleMovementComponent_SetMovementMode, NewMovementMode) == 0x000000, "Member 'KuroVehicleMovementComponent_SetMovementMode::NewMovementMode' has a wrong offset!");
static_assert(offsetof(KuroVehicleMovementComponent_SetMovementMode, NewCustomMode) == 0x000001, "Member 'KuroVehicleMovementComponent_SetMovementMode::NewCustomMode' has a wrong offset!");

// Function KuroVehicle.KuroVehicleMovementComponent.GetMaxAcceleration
// 0x0004 (0x0004 - 0x0000)
struct KuroVehicleMovementComponent_GetMaxAcceleration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroVehicleMovementComponent_GetMaxAcceleration) == 0x000004, "Wrong alignment on KuroVehicleMovementComponent_GetMaxAcceleration");
static_assert(sizeof(KuroVehicleMovementComponent_GetMaxAcceleration) == 0x000004, "Wrong size on KuroVehicleMovementComponent_GetMaxAcceleration");
static_assert(offsetof(KuroVehicleMovementComponent_GetMaxAcceleration, ReturnValue) == 0x000000, "Member 'KuroVehicleMovementComponent_GetMaxAcceleration::ReturnValue' has a wrong offset!");

// Function KuroVehicle.KuroVehicleMovementComponent.Kuro_GetGravity
// 0x000C (0x000C - 0x0000)
struct KuroVehicleMovementComponent_Kuro_GetGravity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroVehicleMovementComponent_Kuro_GetGravity) == 0x000004, "Wrong alignment on KuroVehicleMovementComponent_Kuro_GetGravity");
static_assert(sizeof(KuroVehicleMovementComponent_Kuro_GetGravity) == 0x00000C, "Wrong size on KuroVehicleMovementComponent_Kuro_GetGravity");
static_assert(offsetof(KuroVehicleMovementComponent_Kuro_GetGravity, ReturnValue) == 0x000000, "Member 'KuroVehicleMovementComponent_Kuro_GetGravity::ReturnValue' has a wrong offset!");

// Function KuroVehicle.KuroVehicleMovementComponent.Kuro_GetGravityDirect
// 0x000C (0x000C - 0x0000)
struct KuroVehicleMovementComponent_Kuro_GetGravityDirect final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KuroVehicleMovementComponent_Kuro_GetGravityDirect) == 0x000004, "Wrong alignment on KuroVehicleMovementComponent_Kuro_GetGravityDirect");
static_assert(sizeof(KuroVehicleMovementComponent_Kuro_GetGravityDirect) == 0x00000C, "Wrong size on KuroVehicleMovementComponent_Kuro_GetGravityDirect");
static_assert(offsetof(KuroVehicleMovementComponent_Kuro_GetGravityDirect, ReturnValue) == 0x000000, "Member 'KuroVehicleMovementComponent_Kuro_GetGravityDirect::ReturnValue' has a wrong offset!");

}

