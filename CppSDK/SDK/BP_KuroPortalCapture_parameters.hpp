#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_KuroPortalCapture

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.RoleTeleport__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature) == 0x000004, "Wrong alignment on BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature");
static_assert(sizeof(BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature) == 0x00000C, "Wrong size on BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature");
static_assert(offsetof(BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature, Velocity) == 0x000000, "Member 'BP_KuroPortalCapture_C_RoleTeleport__DelegateSignature::Velocity' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.ExecuteUbergraph_BP_KuroPortalCapture
// 0x000C (0x000C - 0x0000)
struct BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture) == 0x000004, "Wrong alignment on BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture");
static_assert(sizeof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture) == 0x00000C, "Wrong size on BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, EntryPoint) == 0x000000, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_KuroPortalCapture_C_ExecuteUbergraph_BP_KuroPortalCapture::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_KuroPortalCapture_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroPortalCapture_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_KuroPortalCapture_C_ReceiveTick");
static_assert(sizeof(BP_KuroPortalCapture_C_ReceiveTick) == 0x000004, "Wrong size on BP_KuroPortalCapture_C_ReceiveTick");
static_assert(offsetof(BP_KuroPortalCapture_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_KuroPortalCapture_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.Teleport
// 0x0A00 (0x0A00 - 0x0000)
struct BP_KuroPortalCapture_C_Teleport final
{
public:
	struct FTransform                             InTrans;                                           // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	class AActor*                                 InActor;                                           // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRole;                                            // 0x0038(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BAE[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               VelocityRotator;                                   // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Loc;                                               // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BAF[0xC];                                     // 0x0054(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SourceTrans;                                       // 0x0060(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             TempTrans;                                         // 0x0090(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BB0[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATsBaseCharacter_C*                     K2Node_DynamicCast_AsTs_Base_Character;            // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB1[0xF];                                     // 0x00F1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0100(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0130(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetInverseTransform_ReturnValue;          // 0x0160(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0190(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_1;               // 0x01C0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FMatrix                                CallFunc_Conv_TransformToMatrix_ReturnValue;       // 0x01F0(0x0040)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMatrix                                CallFunc_Conv_TransformToMatrix_ReturnValue_1;     // 0x0230(0x0040)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_2;               // 0x0270(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FMatrix                                CallFunc_Conv_TransformToMatrix_ReturnValue_2;     // 0x02A0(0x0040)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_3;               // 0x02E0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0310(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BB2[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0320(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0350(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BB3[0x4];                                     // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_1;          // 0x0360(0x0030)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0390(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB4[0x4];                                     // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_2;          // 0x03A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x03D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x03DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x03E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x03F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetUpVector_ReturnValue_1;                // 0x0400(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x040C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_1;           // 0x0418(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0424(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue_1;         // 0x0430(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x043C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0444(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0448(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_LookRotation_UpFirst_ReturnValue;         // 0x044C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_KuroTeleportTo_ReturnValue;            // 0x0459(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB5[0x2];                                     // 0x045A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_LookRotation_UpFirst_ReturnValue_1;       // 0x045C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_2;           // 0x0468(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BB6[0x4];                                     // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            CallFunc_GetComponentByClass_ReturnValue;          // 0x0478(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotFromYZ_ReturnValue;                // 0x0480(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_KuroTeleportTo_ReturnValue_1;          // 0x048C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB7[0x3];                                     // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VSize_ReturnValue_2;                      // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0494(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x04A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x04A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x04A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BB8[0x4];                                     // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x04B0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x04F0(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0530(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0570(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0580(0x0018)()
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0598(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x05A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x05B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BB9[0x4];                                     // 0x05BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_2;              // 0x05C0(0x0030)(IsPlainOldData, NoDestructor)
	class UStaticMeshComponent*                   CallFunc_GetComponentByClass_ReturnValue_1;        // 0x05F0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetPhysicsLinearVelocity_ReturnValue;     // 0x05F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Matrix_InverseTransformVector_ReturnValue; // 0x0604(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               CallFunc_Matrix_TransformVector_ReturnValue;       // 0x0610(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector4ToVector_ReturnValue;         // 0x0620(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BBA[0x4];                                     // 0x062C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               CallFunc_Matrix_TransformVector_ReturnValue_1;     // 0x0630(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldTransform_SweepHitResult;      // 0x0640(0x0094)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_Conv_Vector4ToVector_ReturnValue_1;       // 0x06D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x06E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x06E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x06E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x06EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x06F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0704(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0710(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_3;           // 0x0714(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0720(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0724(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0728(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x072C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0730(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0734(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0738(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x073C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0740(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0744(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_2;                     // 0x0748(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x074C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0750(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0754(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x0758(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_3;                     // 0x075C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0760(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x0764(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_4;                     // 0x0768(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_3;          // 0x076C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_4;            // 0x0770(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0774(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_4;          // 0x0780(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue_1;                     // 0x0784(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0790(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_5;                     // 0x0794(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_KuroTeleportTo_ReturnValue_2;          // 0x0798(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BBB[0x3];                                     // 0x0799(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_5;            // 0x079C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_5;          // 0x07A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x07A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x07B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x07BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x07C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x07D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x07D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x07DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x07E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x07EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x07F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x0804(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0810(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x081C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0820(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0824(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0828(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0834(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_3;              // 0x0840(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue_4;               // 0x0870(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_4;              // 0x08A0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_6;                // 0x08D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_6;                // 0x08DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_6;                   // 0x08E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BBC[0xC];                                     // 0x08F4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetInverseTransform_ReturnValue_1;        // 0x0900(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue_4;           // 0x0930(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BBD[0x4];                                     // 0x093C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_3;          // 0x0940(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x0970(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BBE[0x4];                                     // 0x097C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_4;          // 0x0980(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x09B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BBF[0x4];                                     // 0x09BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue_5;          // 0x09C0(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x09F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroPortalCapture_C_Teleport) == 0x000010, "Wrong alignment on BP_KuroPortalCapture_C_Teleport");
static_assert(sizeof(BP_KuroPortalCapture_C_Teleport) == 0x000A00, "Wrong size on BP_KuroPortalCapture_C_Teleport");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, InTrans) == 0x000000, "Member 'BP_KuroPortalCapture_C_Teleport::InTrans' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, InActor) == 0x000030, "Member 'BP_KuroPortalCapture_C_Teleport::InActor' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, IsRole) == 0x000038, "Member 'BP_KuroPortalCapture_C_Teleport::IsRole' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, VelocityRotator) == 0x00003C, "Member 'BP_KuroPortalCapture_C_Teleport::VelocityRotator' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, Loc) == 0x000048, "Member 'BP_KuroPortalCapture_C_Teleport::Loc' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, SourceTrans) == 0x000060, "Member 'BP_KuroPortalCapture_C_Teleport::SourceTrans' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, TempTrans) == 0x000090, "Member 'BP_KuroPortalCapture_C_Teleport::TempTrans' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location) == 0x0000C0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation) == 0x0000CC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale) == 0x0000D8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, K2Node_DynamicCast_AsTs_Base_Character) == 0x0000E8, "Member 'BP_KuroPortalCapture_C_Teleport::K2Node_DynamicCast_AsTs_Base_Character' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, K2Node_DynamicCast_bSuccess) == 0x0000F0, "Member 'BP_KuroPortalCapture_C_Teleport::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeTransform_ReturnValue) == 0x000100, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetTransform_ReturnValue) == 0x000130, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetInverseTransform_ReturnValue) == 0x000160, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetInverseTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeTransform_ReturnValue_1) == 0x000190, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetTransform_ReturnValue_1) == 0x0001C0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Conv_TransformToMatrix_ReturnValue) == 0x0001F0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Conv_TransformToMatrix_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Conv_TransformToMatrix_ReturnValue_1) == 0x000230, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Conv_TransformToMatrix_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetTransform_ReturnValue_2) == 0x000270, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Conv_TransformToMatrix_ReturnValue_2) == 0x0002A0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Conv_TransformToMatrix_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetTransform_ReturnValue_3) == 0x0002E0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetForwardVector_ReturnValue) == 0x000310, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_ComposeTransforms_ReturnValue) == 0x000320, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Normal_ReturnValue) == 0x000350, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_ComposeTransforms_ReturnValue_1) == 0x000360, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_ComposeTransforms_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000390, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_ComposeTransforms_ReturnValue_2) == 0x0003A0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_ComposeTransforms_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetUpVector_ReturnValue) == 0x0003D0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_1) == 0x0003DC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_1) == 0x0003E8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_1) == 0x0003F4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetUpVector_ReturnValue_1) == 0x000400, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetUpVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetRightVector_ReturnValue) == 0x00040C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetForwardVector_ReturnValue_1) == 0x000418, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetForwardVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Cross_VectorVector_ReturnValue) == 0x000424, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Cross_VectorVector_ReturnValue_1) == 0x000430, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Cross_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_VSize_ReturnValue) == 0x00043C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_VSize_ReturnValue_1) == 0x000440, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Abs_ReturnValue) == 0x000444, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Abs_ReturnValue_1) == 0x000448, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_LookRotation_UpFirst_ReturnValue) == 0x00044C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_LookRotation_UpFirst_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000458, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_K2_KuroTeleportTo_ReturnValue) == 0x000459, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_K2_KuroTeleportTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_LookRotation_UpFirst_ReturnValue_1) == 0x00045C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_LookRotation_UpFirst_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetForwardVector_ReturnValue_2) == 0x000468, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetForwardVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetComponentByClass_ReturnValue) == 0x000478, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeRotFromYZ_ReturnValue) == 0x000480, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeRotFromYZ_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_K2_KuroTeleportTo_ReturnValue_1) == 0x00048C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_K2_KuroTeleportTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_VSize_ReturnValue_2) == 0x000490, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_VSize_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000494, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakVector_X) == 0x0004A0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakVector_Y) == 0x0004A4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakVector_Z) == 0x0004A8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, K2Node_MakeStruct_FormatArgumentData) == 0x0004B0, "Member 'BP_KuroPortalCapture_C_Teleport::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, K2Node_MakeStruct_FormatArgumentData_1) == 0x0004F0, "Member 'BP_KuroPortalCapture_C_Teleport::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, K2Node_MakeStruct_FormatArgumentData_2) == 0x000530, "Member 'BP_KuroPortalCapture_C_Teleport::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, K2Node_MakeArray_Array) == 0x000570, "Member 'BP_KuroPortalCapture_C_Teleport::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Format_ReturnValue) == 0x000580, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_2) == 0x000598, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_2) == 0x0005A4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_2) == 0x0005B0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeTransform_ReturnValue_2) == 0x0005C0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetComponentByClass_ReturnValue_1) == 0x0005F0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetComponentByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetPhysicsLinearVelocity_ReturnValue) == 0x0005F8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetPhysicsLinearVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Matrix_InverseTransformVector_ReturnValue) == 0x000604, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Matrix_InverseTransformVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Matrix_TransformVector_ReturnValue) == 0x000610, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Matrix_TransformVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Conv_Vector4ToVector_ReturnValue) == 0x000620, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Conv_Vector4ToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Matrix_TransformVector_ReturnValue_1) == 0x000630, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Matrix_TransformVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_K2_SetWorldTransform_SweepHitResult) == 0x000640, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_K2_SetWorldTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Conv_Vector4ToVector_ReturnValue_1) == 0x0006D4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Conv_Vector4ToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakVector_X_1) == 0x0006E0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakVector_Y_1) == 0x0006E4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakVector_Z_1) == 0x0006E8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_3) == 0x0006EC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_3) == 0x0006F8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_3) == 0x000704, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000710, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetForwardVector_ReturnValue_3) == 0x000714, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetForwardVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_FTrunc_ReturnValue) == 0x000720, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakVector_X_2) == 0x000724, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakVector_Y_2) == 0x000728, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakVector_Z_2) == 0x00072C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000730, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000734, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000738, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_FTrunc_ReturnValue_1) == 0x00073C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000740, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000744, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_FTrunc_ReturnValue_2) == 0x000748, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_FTrunc_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x00074C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000750, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000754, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x000758, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_FTrunc_ReturnValue_3) == 0x00075C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_FTrunc_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000760, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x000764, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_FTrunc_ReturnValue_4) == 0x000768, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_FTrunc_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Divide_FloatFloat_ReturnValue_3) == 0x00076C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Divide_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Conv_IntToFloat_ReturnValue_4) == 0x000770, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Conv_IntToFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeVector_ReturnValue) == 0x000774, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Divide_FloatFloat_ReturnValue_4) == 0x000780, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Divide_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Normal_ReturnValue_1) == 0x000784, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Normal_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000790, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_FTrunc_ReturnValue_5) == 0x000794, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_FTrunc_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_K2_KuroTeleportTo_ReturnValue_2) == 0x000798, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_K2_KuroTeleportTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Conv_IntToFloat_ReturnValue_5) == 0x00079C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Conv_IntToFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Divide_FloatFloat_ReturnValue_5) == 0x0007A0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Divide_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeVector_ReturnValue_1) == 0x0007A4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_4) == 0x0007B0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_4) == 0x0007BC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_4) == 0x0007C8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Roll) == 0x0007D4, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Pitch) == 0x0007D8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Yaw) == 0x0007DC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0007E0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_5) == 0x0007EC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_5) == 0x0007F8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_5) == 0x000804, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Add_VectorVector_ReturnValue) == 0x000810, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Roll_1) == 0x00081C, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Pitch_1) == 0x000820, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakRotator_Yaw_1) == 0x000824, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeRotator_ReturnValue) == 0x000828, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeRotator_ReturnValue_1) == 0x000834, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeTransform_ReturnValue_3) == 0x000840, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeTransform_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetTransform_ReturnValue_4) == 0x000870, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetTransform_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_MakeTransform_ReturnValue_4) == 0x0008A0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_MakeTransform_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Location_6) == 0x0008D0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Location_6' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Rotation_6) == 0x0008DC, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Rotation_6' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_BreakTransform_Scale_6) == 0x0008E8, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_BreakTransform_Scale_6' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetInverseTransform_ReturnValue_1) == 0x000900, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetInverseTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_GetForwardVector_ReturnValue_4) == 0x000930, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_GetForwardVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_ComposeTransforms_ReturnValue_3) == 0x000940, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_ComposeTransforms_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x000970, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_ComposeTransforms_ReturnValue_4) == 0x000980, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_ComposeTransforms_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0009B0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_ComposeTransforms_ReturnValue_5) == 0x0009C0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_ComposeTransforms_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_Teleport, CallFunc_IsValid_ReturnValue) == 0x0009F0, "Member 'BP_KuroPortalCapture_C_Teleport::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.SetPair
// 0x0008 (0x0008 - 0x0000)
struct BP_KuroPortalCapture_C_SetPair final
{
public:
	class AActor*                                 Pair;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroPortalCapture_C_SetPair) == 0x000008, "Wrong alignment on BP_KuroPortalCapture_C_SetPair");
static_assert(sizeof(BP_KuroPortalCapture_C_SetPair) == 0x000008, "Wrong size on BP_KuroPortalCapture_C_SetPair");
static_assert(offsetof(BP_KuroPortalCapture_C_SetPair, Pair) == 0x000000, "Member 'BP_KuroPortalCapture_C_SetPair::Pair' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.SetPbDataId
// 0x0004 (0x0004 - 0x0000)
struct BP_KuroPortalCapture_C_SetPbDataId final
{
public:
	int32                                         Param_PbdataId;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_KuroPortalCapture_C_SetPbDataId) == 0x000004, "Wrong alignment on BP_KuroPortalCapture_C_SetPbDataId");
static_assert(sizeof(BP_KuroPortalCapture_C_SetPbDataId) == 0x000004, "Wrong size on BP_KuroPortalCapture_C_SetPbDataId");
static_assert(offsetof(BP_KuroPortalCapture_C_SetPbDataId, Param_PbdataId) == 0x000000, "Member 'BP_KuroPortalCapture_C_SetPbDataId::Param_PbdataId' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.GetPortalTrans
// 0x0060 (0x0060 - 0x0000)
struct BP_KuroPortalCapture_C_GetPortalTrans final
{
public:
	struct FTransform                             NewParam;                                          // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_K2_GetComponentToWorld_ReturnValue;       // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroPortalCapture_C_GetPortalTrans) == 0x000010, "Wrong alignment on BP_KuroPortalCapture_C_GetPortalTrans");
static_assert(sizeof(BP_KuroPortalCapture_C_GetPortalTrans) == 0x000060, "Wrong size on BP_KuroPortalCapture_C_GetPortalTrans");
static_assert(offsetof(BP_KuroPortalCapture_C_GetPortalTrans, NewParam) == 0x000000, "Member 'BP_KuroPortalCapture_C_GetPortalTrans::NewParam' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_GetPortalTrans, CallFunc_K2_GetComponentToWorld_ReturnValue) == 0x000030, "Member 'BP_KuroPortalCapture_C_GetPortalTrans::CallFunc_K2_GetComponentToWorld_ReturnValue' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.GetPair
// 0x0018 (0x0018 - 0x0000)
struct BP_KuroPortalCapture_C_GetPair final
{
public:
	class ABP_KuroPortalCapture_C*                Param_Target;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_KuroPortalCapture_C*                K2Node_DynamicCast_AsBP_Kuro_Portal_Capture;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroPortalCapture_C_GetPair) == 0x000008, "Wrong alignment on BP_KuroPortalCapture_C_GetPair");
static_assert(sizeof(BP_KuroPortalCapture_C_GetPair) == 0x000018, "Wrong size on BP_KuroPortalCapture_C_GetPair");
static_assert(offsetof(BP_KuroPortalCapture_C_GetPair, Param_Target) == 0x000000, "Member 'BP_KuroPortalCapture_C_GetPair::Param_Target' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_GetPair, K2Node_DynamicCast_AsBP_Kuro_Portal_Capture) == 0x000008, "Member 'BP_KuroPortalCapture_C_GetPair::K2Node_DynamicCast_AsBP_Kuro_Portal_Capture' has a wrong offset!");
static_assert(offsetof(BP_KuroPortalCapture_C_GetPair, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_KuroPortalCapture_C_GetPair::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_KuroPortalCapture.BP_KuroPortalCapture_C.ToggleDebug
// 0x0001 (0x0001 - 0x0000)
struct BP_KuroPortalCapture_C_ToggleDebug final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_KuroPortalCapture_C_ToggleDebug) == 0x000001, "Wrong alignment on BP_KuroPortalCapture_C_ToggleDebug");
static_assert(sizeof(BP_KuroPortalCapture_C_ToggleDebug) == 0x000001, "Wrong size on BP_KuroPortalCapture_C_ToggleDebug");
static_assert(offsetof(BP_KuroPortalCapture_C_ToggleDebug, Enable) == 0x000000, "Member 'BP_KuroPortalCapture_C_ToggleDebug::Enable' has a wrong offset!");

}

